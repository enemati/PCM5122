
PCM5122_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005328  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  080054b0  080054b0  000154b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058a0  080058a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058a8  080058a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058a8  080058a8  000158a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080058b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000001ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001f8  200001f8  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d438  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002320  00000000  00000000  0002d474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a78  00000000  00000000  0002f798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000978  00000000  00000000  00030210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020dc5  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f132  00000000  00000000  0005194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c5016  00000000  00000000  00060a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00125a95  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002a94  00000000  00000000  00125ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005498 	.word	0x08005498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005498 	.word	0x08005498

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004c6:	2300      	movs	r3, #0
 80004c8:	607b      	str	r3, [r7, #4]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <MX_DMA_Init+0x3c>)
 80004cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ce:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d4:	6313      	str	r3, [r2, #48]	; 0x30
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_DMA_Init+0x3c>)
 80004d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 2, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	2102      	movs	r1, #2
 80004e6:	202f      	movs	r0, #47	; 0x2f
 80004e8:	f001 f8c9 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80004ec:	202f      	movs	r0, #47	; 0x2f
 80004ee:	f001 f8e2 	bl	80016b6 <HAL_NVIC_EnableIRQ>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40023800 	.word	0x40023800

08000500 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	60fb      	str	r3, [r7, #12]
 800050a:	4b1e      	ldr	r3, [pc, #120]	; (8000584 <MX_GPIO_Init+0x84>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a1d      	ldr	r2, [pc, #116]	; (8000584 <MX_GPIO_Init+0x84>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_GPIO_Init+0x84>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	4b17      	ldr	r3, [pc, #92]	; (8000584 <MX_GPIO_Init+0x84>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a16      	ldr	r2, [pc, #88]	; (8000584 <MX_GPIO_Init+0x84>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_GPIO_Init+0x84>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	607b      	str	r3, [r7, #4]
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_GPIO_Init+0x84>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <MX_GPIO_Init+0x84>)
 8000548:	f043 0304 	orr.w	r3, r3, #4
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <MX_GPIO_Init+0x84>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0304 	and.w	r3, r3, #4
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	603b      	str	r3, [r7, #0]
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_GPIO_Init+0x84>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a08      	ldr	r2, [pc, #32]	; (8000584 <MX_GPIO_Init+0x84>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_GPIO_Init+0x84>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]

}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	40023800 	.word	0x40023800

08000588 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <MX_I2C1_Init+0x50>)
 800058e:	4a13      	ldr	r2, [pc, #76]	; (80005dc <MX_I2C1_Init+0x54>)
 8000590:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000592:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <MX_I2C1_Init+0x50>)
 8000594:	4a12      	ldr	r2, [pc, #72]	; (80005e0 <MX_I2C1_Init+0x58>)
 8000596:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <MX_I2C1_Init+0x50>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800059e:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005b2:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c4:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_I2C1_Init+0x50>)
 80005c6:	f001 fe99 	bl	80022fc <HAL_I2C_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d0:	f000 f9e0 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	20000028 	.word	0x20000028
 80005dc:	40005400 	.word	0x40005400
 80005e0:	000186a0 	.word	0x000186a0

080005e4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a19      	ldr	r2, [pc, #100]	; (8000668 <HAL_I2C_MspInit+0x84>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d12c      	bne.n	8000660 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	613b      	str	r3, [r7, #16]
 800060a:	4b18      	ldr	r3, [pc, #96]	; (800066c <HAL_I2C_MspInit+0x88>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a17      	ldr	r2, [pc, #92]	; (800066c <HAL_I2C_MspInit+0x88>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b15      	ldr	r3, [pc, #84]	; (800066c <HAL_I2C_MspInit+0x88>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	613b      	str	r3, [r7, #16]
 8000620:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000622:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000628:	2312      	movs	r3, #18
 800062a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062c:	2300      	movs	r3, #0
 800062e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000630:	2303      	movs	r3, #3
 8000632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000634:	2304      	movs	r3, #4
 8000636:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4619      	mov	r1, r3
 800063e:	480c      	ldr	r0, [pc, #48]	; (8000670 <HAL_I2C_MspInit+0x8c>)
 8000640:	f001 fbc4 	bl	8001dcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
 8000648:	4b08      	ldr	r3, [pc, #32]	; (800066c <HAL_I2C_MspInit+0x88>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_I2C_MspInit+0x88>)
 800064e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b05      	ldr	r3, [pc, #20]	; (800066c <HAL_I2C_MspInit+0x88>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000660:	bf00      	nop
 8000662:	3728      	adds	r7, #40	; 0x28
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40005400 	.word	0x40005400
 800066c:	40023800 	.word	0x40023800
 8000670:	40020400 	.word	0x40020400

08000674 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <HAL_I2C_MspDeInit+0x38>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d10e      	bne.n	80006a4 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <HAL_I2C_MspDeInit+0x3c>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a09      	ldr	r2, [pc, #36]	; (80006b0 <HAL_I2C_MspDeInit+0x3c>)
 800068c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8000692:	2140      	movs	r1, #64	; 0x40
 8000694:	4807      	ldr	r0, [pc, #28]	; (80006b4 <HAL_I2C_MspDeInit+0x40>)
 8000696:	f001 fd35 	bl	8002104 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 800069a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800069e:	4805      	ldr	r0, [pc, #20]	; (80006b4 <HAL_I2C_MspDeInit+0x40>)
 80006a0:	f001 fd30 	bl	8002104 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40020400 	.word	0x40020400

080006b8 <I2C_Error>:
 * @brief
 *
 * @param i2cHandle
 */
void I2C_Error(I2C_HandleTypeDef* i2cHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  //---De-initialize the I2C communication bus
  HAL_I2C_DeInit(i2cHandle);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f001 ff5f 	bl	8002584 <HAL_I2C_DeInit>

  //---Re-Initialize the I2C communication bus
  MX_I2C1_Init();
 80006c6:	f7ff ff5f 	bl	8000588 <MX_I2C1_Init>
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_I2S3_Init>:
I2S_HandleTypeDef hi2s3;
DMA_HandleTypeDef hdma_spi3_tx;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006d8:	4b13      	ldr	r3, [pc, #76]	; (8000728 <MX_I2S3_Init+0x54>)
 80006da:	4a14      	ldr	r2, [pc, #80]	; (800072c <MX_I2S3_Init+0x58>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006de:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_I2S3_Init+0x54>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2S3_Init+0x54>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80006f2:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <MX_I2S3_Init+0x54>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_I2S3_Init+0x54>)
 80006fa:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80006fe:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2S3_Init+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_I2S3_Init+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2S3_Init+0x54>)
 800070e:	2200      	movs	r2, #0
 8000710:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_I2S3_Init+0x54>)
 8000714:	f002 fde2 	bl	80032dc <HAL_I2S_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800071e:	f000 f939 	bl	8000994 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000dc 	.word	0x200000dc
 800072c:	40003c00 	.word	0x40003c00

08000730 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08e      	sub	sp, #56	; 0x38
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a49      	ldr	r2, [pc, #292]	; (8000880 <HAL_I2S_MspInit+0x150>)
 800075c:	4293      	cmp	r3, r2
 800075e:	f040 808b 	bne.w	8000878 <HAL_I2S_MspInit+0x148>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000762:	2301      	movs	r3, #1
 8000764:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000766:	2332      	movs	r3, #50	; 0x32
 8000768:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800076a:	2302      	movs	r3, #2
 800076c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4618      	mov	r0, r3
 8000774:	f003 ffb8 	bl	80046e8 <HAL_RCCEx_PeriphCLKConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800077e:	f000 f909 	bl	8000994 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <HAL_I2S_MspInit+0x154>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078a:	4a3e      	ldr	r2, [pc, #248]	; (8000884 <HAL_I2S_MspInit+0x154>)
 800078c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000790:	6413      	str	r3, [r2, #64]	; 0x40
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <HAL_I2S_MspInit+0x154>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b38      	ldr	r3, [pc, #224]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a37      	ldr	r2, [pc, #220]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b35      	ldr	r3, [pc, #212]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0301 	and.w	r3, r3, #1
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b31      	ldr	r3, [pc, #196]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a30      	ldr	r2, [pc, #192]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2e      	ldr	r3, [pc, #184]	; (8000884 <HAL_I2S_MspInit+0x154>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
    /**I2S3 GPIO Configuration
    PA4     ------> I2S3_WS
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007d6:	2310      	movs	r3, #16
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e2:	2303      	movs	r3, #3
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80007e6:	2306      	movs	r3, #6
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	4619      	mov	r1, r3
 80007f0:	4825      	ldr	r0, [pc, #148]	; (8000888 <HAL_I2S_MspInit+0x158>)
 80007f2:	f001 faeb 	bl	8001dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80007f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000808:	2306      	movs	r3, #6
 800080a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000810:	4619      	mov	r1, r3
 8000812:	481e      	ldr	r0, [pc, #120]	; (800088c <HAL_I2S_MspInit+0x15c>)
 8000814:	f001 fada 	bl	8001dcc <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream7;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <HAL_I2S_MspInit+0x160>)
 800081a:	4a1e      	ldr	r2, [pc, #120]	; (8000894 <HAL_I2S_MspInit+0x164>)
 800081c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000820:	2200      	movs	r2, #0
 8000822:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000826:	2240      	movs	r2, #64	; 0x40
 8000828:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800082a:	4b19      	ldr	r3, [pc, #100]	; (8000890 <HAL_I2S_MspInit+0x160>)
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000830:	4b17      	ldr	r3, [pc, #92]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000836:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000838:	4b15      	ldr	r3, [pc, #84]	; (8000890 <HAL_I2S_MspInit+0x160>)
 800083a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800083e:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000842:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000846:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_I2S_MspInit+0x160>)
 800084a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800084e:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000852:	2200      	movs	r2, #0
 8000854:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000858:	2200      	movs	r2, #0
 800085a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800085c:	480c      	ldr	r0, [pc, #48]	; (8000890 <HAL_I2S_MspInit+0x160>)
 800085e:	f000 ff45 	bl	80016ec <HAL_DMA_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <HAL_I2S_MspInit+0x13c>
    {
      Error_Handler();
 8000868:	f000 f894 	bl	8000994 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi3_tx);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a08      	ldr	r2, [pc, #32]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000870:	639a      	str	r2, [r3, #56]	; 0x38
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_I2S_MspInit+0x160>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000878:	bf00      	nop
 800087a:	3738      	adds	r7, #56	; 0x38
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40003c00 	.word	0x40003c00
 8000884:	40023800 	.word	0x40023800
 8000888:	40020000 	.word	0x40020000
 800088c:	40020800 	.word	0x40020800
 8000890:	2000007c 	.word	0x2000007c
 8000894:	400260b8 	.word	0x400260b8

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089c:	f000 fd7e 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a0:	f000 f80e 	bl	80008c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a4:	f7ff fe2c 	bl	8000500 <MX_GPIO_Init>
  MX_DMA_Init();
 80008a8:	f7ff fe0a 	bl	80004c0 <MX_DMA_Init>
  MX_I2S3_Init();
 80008ac:	f7ff ff12 	bl	80006d4 <MX_I2S3_Init>
  MX_I2C1_Init();
 80008b0:	f7ff fe6a 	bl	8000588 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  PCM5122_Setup();
 80008b4:	f000 fa1f 	bl	8000cf6 <PCM5122_Setup>
  PCM5122_PlaySineWaveSample(25);
 80008b8:	2019      	movs	r0, #25
 80008ba:	f000 fd41 	bl	8001340 <PCM5122_PlaySineWaveSample>

  while (1)
 80008be:	e7fe      	b.n	80008be <main+0x26>

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b094      	sub	sp, #80	; 0x50
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0320 	add.w	r3, r7, #32
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f004 f86e 	bl	80049b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	4b28      	ldr	r3, [pc, #160]	; (800098c <SystemClock_Config+0xcc>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a27      	ldr	r2, [pc, #156]	; (800098c <SystemClock_Config+0xcc>)
 80008ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b25      	ldr	r3, [pc, #148]	; (800098c <SystemClock_Config+0xcc>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fc:	60bb      	str	r3, [r7, #8]
 80008fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
 8000904:	4b22      	ldr	r3, [pc, #136]	; (8000990 <SystemClock_Config+0xd0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <SystemClock_Config+0xd0>)
 800090a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000920:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000934:	23a8      	movs	r3, #168	; 0xa8
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800093c:	2304      	movs	r3, #4
 800093e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f003 fa6f 	bl	8003e28 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000950:	f000 f820 	bl	8000994 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096c:	f107 030c 	add.w	r3, r7, #12
 8000970:	2105      	movs	r1, #5
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fcd0 	bl	8004318 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800097e:	f000 f809 	bl	8000994 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3750      	adds	r7, #80	; 0x50
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800
 8000990:	40007000 	.word	0x40007000

08000994 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000998:	b672      	cpsid	i
}
 800099a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800099c:	e7fe      	b.n	800099c <Error_Handler+0x8>
	...

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b10      	ldr	r3, [pc, #64]	; (80009ec <HAL_MspInit+0x4c>)
 80009ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ae:	4a0f      	ldr	r2, [pc, #60]	; (80009ec <HAL_MspInit+0x4c>)
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b0d      	ldr	r3, [pc, #52]	; (80009ec <HAL_MspInit+0x4c>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	603b      	str	r3, [r7, #0]
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <HAL_MspInit+0x4c>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	4a08      	ldr	r2, [pc, #32]	; (80009ec <HAL_MspInit+0x4c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6413      	str	r3, [r2, #64]	; 0x40
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_MspInit+0x4c>)
 80009d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40023800 	.word	0x40023800

080009f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <NMI_Handler+0x4>

080009f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <HardFault_Handler+0x4>

080009fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <MemManage_Handler+0x4>

08000a02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <BusFault_Handler+0x4>

08000a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <UsageFault_Handler+0x4>

08000a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a12:	bf00      	nop
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a3c:	f000 fd00 	bl	8001440 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <DMA1_Stream7_IRQHandler+0x10>)
 8000a4a:	f000 ff55 	bl	80018f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000007c 	.word	0x2000007c

08000a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ab4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a82:	490e      	ldr	r1, [pc, #56]	; (8000abc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a84:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0b      	ldr	r2, [pc, #44]	; (8000ac4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a98:	4c0b      	ldr	r4, [pc, #44]	; (8000ac8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000aa6:	f7ff ffd7 	bl	8000a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aaa:	f003 ff5d 	bl	8004968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aae:	f7ff fef3 	bl	8000898 <main>
  bx  lr    
 8000ab2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ab4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ab8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000abc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ac0:	080058b0 	.word	0x080058b0
  ldr r2, =_sbss
 8000ac4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000ac8:	200001f8 	.word	0x200001f8

08000acc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000acc:	e7fe      	b.n	8000acc <ADC_IRQHandler>
	...

08000ad0 <PCM5122_I2C_Write>:
 * @param Reg
 * @param Value
 * @return
 */
static uint8_t PCM5122_I2C_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af04      	add	r7, sp, #16
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	460b      	mov	r3, r1
 8000adc:	71bb      	strb	r3, [r7, #6]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	717b      	strb	r3, [r7, #5]
	uint32_t result = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]
	HAL_StatusTypeDef status = HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	72fb      	strb	r3, [r7, #11]

	status = HAL_I2C_Mem_Write(PCM5122_I2C_HANDLE, (uint16_t) Addr, (uint16_t) (Reg | 0X80), (uint16_t) I2C_MEMADD_SIZE_8BIT, &Value, 1, PCM5122_I2C_TIMEOUT_MAX);
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	b299      	uxth	r1, r3
 8000aee:	79bb      	ldrb	r3, [r7, #6]
 8000af0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	9302      	str	r3, [sp, #8]
 8000afe:	2301      	movs	r3, #1
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	1d7b      	adds	r3, r7, #5
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	2301      	movs	r3, #1
 8000b08:	4808      	ldr	r0, [pc, #32]	; (8000b2c <PCM5122_I2C_Write+0x5c>)
 8000b0a:	f001 fd6b 	bl	80025e4 <HAL_I2C_Mem_Write>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	72fb      	strb	r3, [r7, #11]

	//---Check the communication status
	if (status != HAL_OK)
 8000b12:	7afb      	ldrb	r3, [r7, #11]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <PCM5122_I2C_Write+0x4e>
	{
		//---Execute user timeout callback
		I2C_Error(PCM5122_I2C_HANDLE);
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <PCM5122_I2C_Write+0x5c>)
 8000b1a:	f7ff fdcd 	bl	80006b8 <I2C_Error>
	}

	return result;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	b2db      	uxtb	r3, r3
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3710      	adds	r7, #16
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000028 	.word	0x20000028

08000b30 <PCM5122_I2C_Read>:
 * @param Reg
 * @param Value
 * @return
 */
static uint8_t PCM5122_I2C_Read(uint8_t Addr, uint8_t Reg, uint8_t *Value)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b088      	sub	sp, #32
 8000b34:	af04      	add	r7, sp, #16
 8000b36:	4603      	mov	r3, r0
 8000b38:	603a      	str	r2, [r7, #0]
 8000b3a:	71fb      	strb	r3, [r7, #7]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	71bb      	strb	r3, [r7, #6]
	uint8_t result = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status = HAL_OK;
 8000b44:	2300      	movs	r3, #0
 8000b46:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Read(PCM5122_I2C_HANDLE, Addr, (uint16_t)(Reg|0X80), I2C_MEMADD_SIZE_8BIT, Value, 1, PCM5122_I2C_TIMEOUT_MAX);
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	b299      	uxth	r1, r3
 8000b4c:	79bb      	ldrb	r3, [r7, #6]
 8000b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5a:	9302      	str	r3, [sp, #8]
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	9301      	str	r3, [sp, #4]
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	9300      	str	r3, [sp, #0]
 8000b64:	2301      	movs	r3, #1
 8000b66:	4808      	ldr	r0, [pc, #32]	; (8000b88 <PCM5122_I2C_Read+0x58>)
 8000b68:	f001 fe36 	bl	80027d8 <HAL_I2C_Mem_Read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	73bb      	strb	r3, [r7, #14]

	/* Check the communication status */
	if (status != HAL_OK)
 8000b70:	7bbb      	ldrb	r3, [r7, #14]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d002      	beq.n	8000b7c <PCM5122_I2C_Read+0x4c>
	{
		/* Execute user timeout callback */
		I2C_Error(PCM5122_I2C_HANDLE);
 8000b76:	4804      	ldr	r0, [pc, #16]	; (8000b88 <PCM5122_I2C_Read+0x58>)
 8000b78:	f7ff fd9e 	bl	80006b8 <I2C_Error>
	}

	return result;
 8000b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000028 	.word	0x20000028

08000b8c <PCM5122_SelectPage>:
 *
 * @param RegAddr
 * @return
 */
uint8_t PCM5122_SelectPage(typeRegister RegAddr)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	80fb      	strh	r3, [r7, #6]
	uint8_t CurrentPage;
	uint8_t Result = 0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	73fb      	strb	r3, [r7, #15]
	uint8_t RequestPage = ((RegAddr >> 8) & 0xff);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	73bb      	strb	r3, [r7, #14]

	if (PCM5122_I2C_Read(PCM5122_AUDIO_I2C_ADDRESS, 0, &CurrentPage) == HAL_OK)
 8000ba2:	f107 030d 	add.w	r3, r7, #13
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	2100      	movs	r1, #0
 8000baa:	209a      	movs	r0, #154	; 0x9a
 8000bac:	f7ff ffc0 	bl	8000b30 <PCM5122_I2C_Read>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d10b      	bne.n	8000bce <PCM5122_SelectPage+0x42>
	{
		if (RequestPage != CurrentPage)
 8000bb6:	7b7b      	ldrb	r3, [r7, #13]
 8000bb8:	7bba      	ldrb	r2, [r7, #14]
 8000bba:	429a      	cmp	r2, r3
 8000bbc:	d007      	beq.n	8000bce <PCM5122_SelectPage+0x42>
		{
			Result = PCM5122_I2C_Write(PCM5122_AUDIO_I2C_ADDRESS, 0, RequestPage);
 8000bbe:	7bbb      	ldrb	r3, [r7, #14]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	209a      	movs	r0, #154	; 0x9a
 8000bc6:	f7ff ff83 	bl	8000ad0 <PCM5122_I2C_Write>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
		}
	}

	return Result;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3710      	adds	r7, #16
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <PCM5122_WriteRegister>:
 * @param RegAddr
 * @param data
 * @return
 */
uint8_t PCM5122_WriteRegister(typeRegister RegAddr, uint8_t data)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	460a      	mov	r2, r1
 8000be2:	80fb      	strh	r3, [r7, #6]
 8000be4:	4613      	mov	r3, r2
 8000be6:	717b      	strb	r3, [r7, #5]
	uint8_t Result = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	73fb      	strb	r3, [r7, #15]

	if (PCM5122_SelectPage(RegAddr) == 0)
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ffcc 	bl	8000b8c <PCM5122_SelectPage>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10b      	bne.n	8000c12 <PCM5122_WriteRegister+0x3a>
		Result += PCM5122_I2C_Write(PCM5122_AUDIO_I2C_ADDRESS, RegAddr, data);
 8000bfa:	88fb      	ldrh	r3, [r7, #6]
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	797a      	ldrb	r2, [r7, #5]
 8000c00:	4619      	mov	r1, r3
 8000c02:	209a      	movs	r0, #154	; 0x9a
 8000c04:	f7ff ff64 	bl	8000ad0 <PCM5122_I2C_Write>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
 8000c0e:	4413      	add	r3, r2
 8000c10:	73fb      	strb	r3, [r7, #15]

	return Result;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <PCM5122_ReadRegister>:
 *
 * @param RegAddr
 * @return
 */
uint8_t PCM5122_ReadRegister(typeRegister RegAddr)
 {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	uint8_t value = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	73fb      	strb	r3, [r7, #15]

	PCM5122_SelectPage(RegAddr);
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff ffad 	bl	8000b8c <PCM5122_SelectPage>

	PCM5122_I2C_Read(PCM5122_AUDIO_I2C_ADDRESS, RegAddr, &value);
 8000c32:	88fb      	ldrh	r3, [r7, #6]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	f107 020f 	add.w	r2, r7, #15
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	209a      	movs	r0, #154	; 0x9a
 8000c3e:	f7ff ff77 	bl	8000b30 <PCM5122_I2C_Read>

	return value;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3710      	adds	r7, #16
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <PCM5122_RegisterInitialize>:
 * @param rate
 * @param bps
 * @return
 */
bool PCM5122_RegisterInitialize(typeSamplingRate rate, typeBitDepth bps)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	460b      	mov	r3, r1
 8000c56:	70fb      	strb	r3, [r7, #3]
	PCM5122_Reset();
 8000c58:	f000 fa1b 	bl	8001092 <PCM5122_Reset>

	PCM5122_WriteRegister(PCM5122_REG_GPIO_EN, 0x24);
 8000c5c:	2124      	movs	r1, #36	; 0x24
 8000c5e:	2008      	movs	r0, #8
 8000c60:	f7ff ffba 	bl	8000bd8 <PCM5122_WriteRegister>

	PCM5122_WriteRegister((PCM5122_REG_GPIOn_OUTPUT_SEL + 2), 0x02);
 8000c64:	2102      	movs	r1, #2
 8000c66:	2052      	movs	r0, #82	; 0x52
 8000c68:	f7ff ffb6 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister((PCM5122_REG_GPIOn_OUTPUT_SEL + 5), 0x02);
 8000c6c:	2102      	movs	r1, #2
 8000c6e:	2055      	movs	r0, #85	; 0x55
 8000c70:	f7ff ffb2 	bl	8000bd8 <PCM5122_WriteRegister>

	PCM5122_SetGpioLow(PCM5122_GPIO_ALL);
 8000c74:	203f      	movs	r0, #63	; 0x3f
 8000c76:	f000 f882 	bl	8000d7e <PCM5122_SetGpioLow>
	PCM5122_SetGpioHigh(PCM5122_GPIO_6);
 8000c7a:	2020      	movs	r0, #32
 8000c7c:	f000 f85e 	bl	8000d3c <PCM5122_SetGpioHigh>
	PCM5122_SetGpioLow(PCM5122_GPIO_ALL);
 8000c80:	203f      	movs	r0, #63	; 0x3f
 8000c82:	f000 f87c 	bl	8000d7e <PCM5122_SetGpioLow>
	PCM5122_SetGpioHigh(PCM5122_GPIO_3);
 8000c86:	2004      	movs	r0, #4
 8000c88:	f000 f858 	bl	8000d3c <PCM5122_SetGpioHigh>

	PCM5122_WriteRegister(PCM5122_REG_GPIO_EN, 0x2C);			// LED Blue = OFF / OSCs = ENABLE
 8000c8c:	212c      	movs	r1, #44	; 0x2c
 8000c8e:	2008      	movs	r0, #8
 8000c90:	f7ff ffa2 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister((PCM5122_REG_GPIOn_OUTPUT_SEL + 3), 0x02);// (Output Selection) GPIO4=Register GPIO4 output (Page 0 / Register 86, bit 3)
 8000c94:	2102      	movs	r1, #2
 8000c96:	2053      	movs	r0, #83	; 0x53
 8000c98:	f7ff ff9e 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_LED_BLUE_ON();
 8000c9c:	2008      	movs	r0, #8
 8000c9e:	f000 f84d 	bl	8000d3c <PCM5122_SetGpioHigh>

	PCM5122_ConfigurePLL(rate, bps);
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f000 f890 	bl	8000dcc <PCM5122_ConfigurePLL>
	PCM5122_ConfigSpeedMode(rate);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f000 f993 	bl	8000fd8 <PCM5122_ConfigSpeedMode>
	PCM5122_SetVolume(255);										// Volume = Mute
 8000cb2:	20ff      	movs	r0, #255	; 0xff
 8000cb4:	f000 fa2c 	bl	8001110 <PCM5122_SetVolume>
	PCM5122_SetPowerMode(PCM5122_POWER_MODE_STANDBY);
 8000cb8:	2010      	movs	r0, #16
 8000cba:	f000 f830 	bl	8000d1e <PCM5122_SetPowerMode>
	PCM5122_SetPowerMode(PCM5122_POWER_MODE_POWERDOWN_STANDBY);
 8000cbe:	2011      	movs	r0, #17
 8000cc0:	f000 f82d 	bl	8000d1e <PCM5122_SetPowerMode>
	PCM5122_SetVolume(0);										// Volume = +24.0 dB
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	f000 fa23 	bl	8001110 <PCM5122_SetVolume>
	PCM5122_ConfigI2SFormat(bps);
 8000cca:	78fb      	ldrb	r3, [r7, #3]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f9b5 	bl	800103c <PCM5122_ConfigI2SFormat>
	HAL_Delay(10); 												// Wait for calibration, startup, etc
 8000cd2:	200a      	movs	r0, #10
 8000cd4:	f000 fbd4 	bl	8001480 <HAL_Delay>

	PCM5122_LED_RED_ON();
 8000cd8:	2008      	movs	r0, #8
 8000cda:	f000 f850 	bl	8000d7e <PCM5122_SetGpioLow>

	return (PCM5122_GetPowerState() == PCM5122_POWER_STATE_RUN);
 8000cde:	f000 fa07 	bl	80010f0 <PCM5122_GetPowerState>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b05      	cmp	r3, #5
 8000ce6:	bf0c      	ite	eq
 8000ce8:	2301      	moveq	r3, #1
 8000cea:	2300      	movne	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <PCM5122_Setup>:
 * @brief Initializes the audio codec and the control interface.
 *
 * @return
 */
uint32_t PCM5122_Setup(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	af00      	add	r7, sp, #0
  uint32_t counter = 0;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]

  counter += PCM5122_RegisterInitialize(PCM5122_SAMPLE_RATE_48K, PCM5122_BITS_PER_SAMPLE_16);//PCM5122_BITS_PER_SAMPLE_32);
 8000d00:	2110      	movs	r1, #16
 8000d02:	f64b 3080 	movw	r0, #48000	; 0xbb80
 8000d06:	f7ff ffa1 	bl	8000c4c <PCM5122_RegisterInitialize>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	607b      	str	r3, [r7, #4]

  return counter;	// Return communication control value
 8000d14:	687b      	ldr	r3, [r7, #4]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <PCM5122_SetPowerMode>:
 * 				PCM5122_POWER_MODE_POWERDOWN
 * 				PCM5122_POWER_MODE_POWERDOWN_STANDBY
 * @return
 */
uint8_t PCM5122_SetPowerMode(typePowerMode Mode)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	4603      	mov	r3, r0
 8000d26:	71fb      	strb	r3, [r7, #7]
	return PCM5122_WriteRegister(PCM5122_REG_STANDBY_POWERDOWN, Mode);
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff ff53 	bl	8000bd8 <PCM5122_WriteRegister>
 8000d32:	4603      	mov	r3, r0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3708      	adds	r7, #8
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <PCM5122_SetGpioHigh>:
 *
 * @param Gpio
 * @return
 */
uint8_t PCM5122_SetGpioHigh(typeGpio Gpio)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
	uint8_t Result = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	73fb      	strb	r3, [r7, #15]
	uint8_t RegValue = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	73bb      	strb	r3, [r7, #14]

	RegValue = PCM5122_ReadRegister(PCM5122_REG_GPIO_OUTPUT_CTRL);
 8000d4e:	2056      	movs	r0, #86	; 0x56
 8000d50:	f7ff ff64 	bl	8000c1c <PCM5122_ReadRegister>
 8000d54:	4603      	mov	r3, r0
 8000d56:	73bb      	strb	r3, [r7, #14]
	RegValue |= (uint8_t)Gpio;
 8000d58:	7bba      	ldrb	r2, [r7, #14]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	73bb      	strb	r3, [r7, #14]
	Result += PCM5122_WriteRegister(PCM5122_REG_GPIO_OUTPUT_CTRL, RegValue);
 8000d60:	7bbb      	ldrb	r3, [r7, #14]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2056      	movs	r0, #86	; 0x56
 8000d66:	f7ff ff37 	bl	8000bd8 <PCM5122_WriteRegister>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4413      	add	r3, r2
 8000d72:	73fb      	strb	r3, [r7, #15]

	return Result;
 8000d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PCM5122_SetGpioLow>:
 *
 * @param Gpio
 * @return
 */
uint8_t PCM5122_SetGpioLow(typeGpio Gpio)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	71fb      	strb	r3, [r7, #7]
	uint8_t Result = 0;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	73fb      	strb	r3, [r7, #15]
	uint8_t RegValue = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	73bb      	strb	r3, [r7, #14]

	RegValue = PCM5122_ReadRegister(PCM5122_REG_GPIO_OUTPUT_CTRL);
 8000d90:	2056      	movs	r0, #86	; 0x56
 8000d92:	f7ff ff43 	bl	8000c1c <PCM5122_ReadRegister>
 8000d96:	4603      	mov	r3, r0
 8000d98:	73bb      	strb	r3, [r7, #14]
	RegValue &= ~(uint8_t)Gpio;
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	b25a      	sxtb	r2, r3
 8000da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000da6:	4013      	ands	r3, r2
 8000da8:	b25b      	sxtb	r3, r3
 8000daa:	73bb      	strb	r3, [r7, #14]
	Result += PCM5122_WriteRegister(PCM5122_REG_GPIO_OUTPUT_CTRL, RegValue);
 8000dac:	7bbb      	ldrb	r3, [r7, #14]
 8000dae:	4619      	mov	r1, r3
 8000db0:	2056      	movs	r0, #86	; 0x56
 8000db2:	f7ff ff11 	bl	8000bd8 <PCM5122_WriteRegister>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	73fb      	strb	r3, [r7, #15]

	return Result;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <PCM5122_ConfigurePLL>:
 * @param rate
 * @param bps
 * @return
 */
bool PCM5122_ConfigurePLL(typeSamplingRate rate, typeBitDepth bps)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b08c      	sub	sp, #48	; 0x30
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	70fb      	strb	r3, [r7, #3]
	// See here : https://e2e.ti.com/support/data_converters/audio_converters/f/64/t/428281
	// for a config example

	//---Check that the bit clock (PLL input) is between 1MHz and 50MHz
	uint32_t bckFreq = rate * bps * 2;
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	60bb      	str	r3, [r7, #8]
	if (bckFreq < 1000000 || bckFreq > 50000000)
 8000de4:	68bb      	ldr	r3, [r7, #8]
 8000de6:	4a75      	ldr	r2, [pc, #468]	; (8000fbc <PCM5122_ConfigurePLL+0x1f0>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d903      	bls.n	8000df4 <PCM5122_ConfigurePLL+0x28>
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	4a74      	ldr	r2, [pc, #464]	; (8000fc0 <PCM5122_ConfigurePLL+0x1f4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d901      	bls.n	8000df8 <PCM5122_ConfigurePLL+0x2c>
		return FALSE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	e0dd      	b.n	8000fb4 <PCM5122_ConfigurePLL+0x1e8>

	//---24 bits is not supported for 44.1kHz and 48kHz.
	if ((rate == PCM5122_SAMPLE_RATE_44_1K || rate == PCM5122_SAMPLE_RATE_48K) && bps == PCM5122_BITS_PER_SAMPLE_24)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d004      	beq.n	8000e0c <PCM5122_ConfigurePLL+0x40>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d104      	bne.n	8000e16 <PCM5122_ConfigurePLL+0x4a>
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b18      	cmp	r3, #24
 8000e10:	d101      	bne.n	8000e16 <PCM5122_ConfigurePLL+0x4a>
		return FALSE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	e0ce      	b.n	8000fb4 <PCM5122_ConfigurePLL+0x1e8>

	//---Initialize system clock from the I2S BCK input
	PCM5122_WriteRegister(PCM5122_REG_IGNORE_ERRORS, 0x1A); 	// Disable clock autoset and ignore SCK detection
 8000e16:	211a      	movs	r1, #26
 8000e18:	2025      	movs	r0, #37	; 0x25
 8000e1a:	f7ff fedd 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_PLL_CLOCK_SOURCE, 0x10); 	// Set PLL clock source to BCK
 8000e1e:	2110      	movs	r1, #16
 8000e20:	200d      	movs	r0, #13
 8000e22:	f7ff fed9 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_DAC_CLOCK_SOURCE, 0x10); 	// Set DAC clock source to PLL output
 8000e26:	2110      	movs	r1, #16
 8000e28:	200e      	movs	r0, #14
 8000e2a:	f7ff fed5 	bl	8000bd8 <PCM5122_WriteRegister>
	int p, j, d, r;

	//---Clock dividers
	int nmac, ndac, ncp, dosr, idac;

	if (rate == PCM5122_SAMPLE_RATE_11_025K
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f642 3211 	movw	r2, #11025	; 0x2b11
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d009      	beq.n	8000e4c <PCM5122_ConfigurePLL+0x80>
			|| rate == PCM5122_SAMPLE_RATE_22_05K
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f245 6222 	movw	r2, #22050	; 0x5622
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d004      	beq.n	8000e4c <PCM5122_ConfigurePLL+0x80>
			|| rate == PCM5122_SAMPLE_RATE_44_1K) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f64a 4244 	movw	r2, #44100	; 0xac44
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d119      	bne.n	8000e80 <PCM5122_ConfigurePLL+0xb4>
		//44.1kHz and derivatives.
		//P = 1, R = 2, D = 0 for all supported combinations.
		//Set J to have PLL clk = 90.3168 MHz
		p = 1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
		r = 2;
 8000e50:	2302      	movs	r3, #2
 8000e52:	623b      	str	r3, [r7, #32]
		j = 90316800 / bckFreq / r;
 8000e54:	4a5b      	ldr	r2, [pc, #364]	; (8000fc4 <PCM5122_ConfigurePLL+0x1f8>)
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	fbb2 f2f3 	udiv	r2, r2, r3
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
		d = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24

		//Derive clocks from the 90.3168MHz PLL
		nmac = 2;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
		ndac = 16;
 8000e6c:	2310      	movs	r3, #16
 8000e6e:	61bb      	str	r3, [r7, #24]
		ncp = 4;
 8000e70:	2304      	movs	r3, #4
 8000e72:	617b      	str	r3, [r7, #20]
		dosr = 8;
 8000e74:	2308      	movs	r3, #8
 8000e76:	613b      	str	r3, [r7, #16]
		idac = 1024; // DSP clock / sample rate
 8000e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e045      	b.n	8000f0c <PCM5122_ConfigurePLL+0x140>
	}
	else
	{
		//---8kHz and multiples.
		//   PLL config for a 98.304 MHz PLL clk
		if ((bps == PCM5122_BITS_PER_SAMPLE_24) && (bckFreq > 1536000))
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b18      	cmp	r3, #24
 8000e84:	d106      	bne.n	8000e94 <PCM5122_ConfigurePLL+0xc8>
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	4a4f      	ldr	r2, [pc, #316]	; (8000fc8 <PCM5122_ConfigurePLL+0x1fc>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d902      	bls.n	8000e94 <PCM5122_ConfigurePLL+0xc8>
			p = 3;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000e92:	e008      	b.n	8000ea6 <PCM5122_ConfigurePLL+0xda>
		else if (bckFreq > 12288000)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4a4d      	ldr	r2, [pc, #308]	; (8000fcc <PCM5122_ConfigurePLL+0x200>)
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	d902      	bls.n	8000ea2 <PCM5122_ConfigurePLL+0xd6>
			p = 2;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ea0:	e001      	b.n	8000ea6 <PCM5122_ConfigurePLL+0xda>
		else
			p = 1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c

		r = 2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	623b      	str	r3, [r7, #32]
		j = 98304000 / (bckFreq / p) / r;
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4a47      	ldr	r2, [pc, #284]	; (8000fd0 <PCM5122_ConfigurePLL+0x204>)
 8000eb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000eb8:	6a3b      	ldr	r3, [r7, #32]
 8000eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ebe:	62bb      	str	r3, [r7, #40]	; 0x28
		d = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24

		//---Derive clocks from the 98.304MHz PLL
		switch (rate)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8000eca:	d004      	beq.n	8000ed6 <PCM5122_ConfigurePLL+0x10a>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8000ed2:	d003      	beq.n	8000edc <PCM5122_ConfigurePLL+0x110>
 8000ed4:	e005      	b.n	8000ee2 <PCM5122_ConfigurePLL+0x116>
		{
			case PCM5122_SAMPLE_RATE_16K:
			{
				nmac = 6;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	61fb      	str	r3, [r7, #28]
				break;
 8000eda:	e005      	b.n	8000ee8 <PCM5122_ConfigurePLL+0x11c>
			}
			case PCM5122_SAMPLE_RATE_32K:
			{
				nmac = 3;
 8000edc:	2303      	movs	r3, #3
 8000ede:	61fb      	str	r3, [r7, #28]
				break;
 8000ee0:	e002      	b.n	8000ee8 <PCM5122_ConfigurePLL+0x11c>
			}
			default:
			{
				nmac = 2;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	61fb      	str	r3, [r7, #28]
				break;
 8000ee6:	bf00      	nop
			}
		}

		ndac = 16;
 8000ee8:	2310      	movs	r3, #16
 8000eea:	61bb      	str	r3, [r7, #24]
		ncp = 4;
 8000eec:	2304      	movs	r3, #4
 8000eee:	617b      	str	r3, [r7, #20]
		dosr = (384000 / rate);
 8000ef0:	4a38      	ldr	r2, [pc, #224]	; (8000fd4 <PCM5122_ConfigurePLL+0x208>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef8:	613b      	str	r3, [r7, #16]
		idac = (98304000 / nmac / rate); // DSP clock / sample rate
 8000efa:	4a35      	ldr	r2, [pc, #212]	; (8000fd0 <PCM5122_ConfigurePLL+0x204>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f02:	461a      	mov	r2, r3
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
	}

	//---Configure PLL
	PCM5122_WriteRegister(PCM5122_REG_PLL_P, (p - 1));
 8000f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	3b01      	subs	r3, #1
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	4619      	mov	r1, r3
 8000f16:	2014      	movs	r0, #20
 8000f18:	f7ff fe5e 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_PLL_J, j);
 8000f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f1e:	b2db      	uxtb	r3, r3
 8000f20:	4619      	mov	r1, r3
 8000f22:	2015      	movs	r0, #21
 8000f24:	f7ff fe58 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_PLL_D_MSB, ((d >> 8) & 0x3F));
 8000f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2a:	121b      	asrs	r3, r3, #8
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	4619      	mov	r1, r3
 8000f36:	2016      	movs	r0, #22
 8000f38:	f7ff fe4e 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_PLL_D_LSB, (d & 0xFF));
 8000f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	4619      	mov	r1, r3
 8000f42:	2017      	movs	r0, #23
 8000f44:	f7ff fe48 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_PLL_R, (r - 1));
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	4619      	mov	r1, r3
 8000f52:	2018      	movs	r0, #24
 8000f54:	f7ff fe40 	bl	8000bd8 <PCM5122_WriteRegister>

	//---Clock dividers
	PCM5122_WriteRegister(PCM5122_REG_DSP_CLOCK_DIV, (nmac - 1));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4619      	mov	r1, r3
 8000f62:	201b      	movs	r0, #27
 8000f64:	f7ff fe38 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_DAC_CLOCK_DIV, (ndac - 1));
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	201c      	movs	r0, #28
 8000f74:	f7ff fe30 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_NCP_CLOCK_DIV, (ncp - 1));
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	4619      	mov	r1, r3
 8000f82:	201d      	movs	r0, #29
 8000f84:	f7ff fe28 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_OSR_CLOCK_DIV, (dosr - 1));
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	4619      	mov	r1, r3
 8000f92:	201e      	movs	r0, #30
 8000f94:	f7ff fe20 	bl	8000bd8 <PCM5122_WriteRegister>

	//---IDAC (nb of DSP clock cycles per sample)
	PCM5122_WriteRegister(PCM5122_REG_IDAC_MSB, ((idac >> 8) & 0xFF));
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	121b      	asrs	r3, r3, #8
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	2023      	movs	r0, #35	; 0x23
 8000fa2:	f7ff fe19 	bl	8000bd8 <PCM5122_WriteRegister>
	PCM5122_WriteRegister(PCM5122_REG_IDAC_LSB, (idac & 0xFF));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	4619      	mov	r1, r3
 8000fac:	2024      	movs	r0, #36	; 0x24
 8000fae:	f7ff fe13 	bl	8000bd8 <PCM5122_WriteRegister>

	return TRUE;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3730      	adds	r7, #48	; 0x30
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	000f423f 	.word	0x000f423f
 8000fc0:	02faf080 	.word	0x02faf080
 8000fc4:	05622000 	.word	0x05622000
 8000fc8:	00177000 	.word	0x00177000
 8000fcc:	00bb8000 	.word	0x00bb8000
 8000fd0:	05dc0000 	.word	0x05dc0000
 8000fd4:	0005dc00 	.word	0x0005dc00

08000fd8 <PCM5122_ConfigSpeedMode>:
 *
 * @param Rate
 * @return
 */
uint8_t PCM5122_ConfigSpeedMode(typeSamplingRate Rate)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	uint8_t Status = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	72fb      	strb	r3, [r7, #11]

	int SpeedMode;

	if (Rate <= PCM5122_SAMPLE_RATE_48K)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d802      	bhi.n	8000ff4 <PCM5122_ConfigSpeedMode+0x1c>
		SpeedMode = 0;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	e00f      	b.n	8001014 <PCM5122_ConfigSpeedMode+0x3c>
	else if (Rate <= PCM5122_SAMPLE_RATE_96K)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <PCM5122_ConfigSpeedMode+0x5c>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d802      	bhi.n	8001002 <PCM5122_ConfigSpeedMode+0x2a>
		SpeedMode = 1;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	e008      	b.n	8001014 <PCM5122_ConfigSpeedMode+0x3c>
	else if (Rate <= PCM5122_SAMPLE_RATE_192K)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <PCM5122_ConfigSpeedMode+0x60>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d802      	bhi.n	8001010 <PCM5122_ConfigSpeedMode+0x38>
		SpeedMode = 2;
 800100a:	2302      	movs	r3, #2
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e001      	b.n	8001014 <PCM5122_ConfigSpeedMode+0x3c>
	else
		SpeedMode = 3;
 8001010:	2303      	movs	r3, #3
 8001012:	60fb      	str	r3, [r7, #12]

	Status+= PCM5122_WriteRegister(PCM5122_REG_FS_SPEED_MODE, SpeedMode);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	2022      	movs	r0, #34	; 0x22
 800101c:	f7ff fddc 	bl	8000bd8 <PCM5122_WriteRegister>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	7afb      	ldrb	r3, [r7, #11]
 8001026:	4413      	add	r3, r2
 8001028:	72fb      	strb	r3, [r7, #11]

	return Status;
 800102a:	7afb      	ldrb	r3, [r7, #11]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	00017700 	.word	0x00017700
 8001038:	0002ee00 	.word	0x0002ee00

0800103c <PCM5122_ConfigI2SFormat>:
 *
 * @param bps
 * @return
 */
uint8_t PCM5122_ConfigI2SFormat(typeBitDepth bps)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	uint8_t Status = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	73bb      	strb	r3, [r7, #14]
	uint8_t Config = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	73fb      	strb	r3, [r7, #15]

	switch (bps)
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	2b20      	cmp	r3, #32
 8001052:	d00c      	beq.n	800106e <PCM5122_ConfigI2SFormat+0x32>
 8001054:	2b20      	cmp	r3, #32
 8001056:	dc0d      	bgt.n	8001074 <PCM5122_ConfigI2SFormat+0x38>
 8001058:	2b10      	cmp	r3, #16
 800105a:	d002      	beq.n	8001062 <PCM5122_ConfigI2SFormat+0x26>
 800105c:	2b18      	cmp	r3, #24
 800105e:	d003      	beq.n	8001068 <PCM5122_ConfigI2SFormat+0x2c>
 8001060:	e008      	b.n	8001074 <PCM5122_ConfigI2SFormat+0x38>
	{
		case PCM5122_BITS_PER_SAMPLE_16:
		{
			Config = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	73fb      	strb	r3, [r7, #15]
			break;
 8001066:	e005      	b.n	8001074 <PCM5122_ConfigI2SFormat+0x38>
		}
		case PCM5122_BITS_PER_SAMPLE_24:
		{
			Config = 0x02;
 8001068:	2302      	movs	r3, #2
 800106a:	73fb      	strb	r3, [r7, #15]
			break;
 800106c:	e002      	b.n	8001074 <PCM5122_ConfigI2SFormat+0x38>
		}
		case PCM5122_BITS_PER_SAMPLE_32:
		{
			Config = 0x03;
 800106e:	2303      	movs	r3, #3
 8001070:	73fb      	strb	r3, [r7, #15]
			break;
 8001072:	bf00      	nop
		}
	}

	Status += PCM5122_WriteRegister(PCM5122_REG_I2S_FORMAT, Config);
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	4619      	mov	r1, r3
 8001078:	2028      	movs	r0, #40	; 0x28
 800107a:	f7ff fdad 	bl	8000bd8 <PCM5122_WriteRegister>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	7bbb      	ldrb	r3, [r7, #14]
 8001084:	4413      	add	r3, r2
 8001086:	73bb      	strb	r3, [r7, #14]

	return Status;
 8001088:	7bbb      	ldrb	r3, [r7, #14]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <PCM5122_Reset>:
 * @brief Reset internal modules and registers
 *
 * @return
 */
uint32_t PCM5122_Reset(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]

	counter += PCM5122_SetPowerMode(PCM5122_POWER_MODE_STANDBY);
 800109c:	2010      	movs	r0, #16
 800109e:	f7ff fe3e 	bl	8000d1e <PCM5122_SetPowerMode>
 80010a2:	4603      	mov	r3, r0
 80010a4:	461a      	mov	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4413      	add	r3, r2
 80010aa:	607b      	str	r3, [r7, #4]
	counter += PCM5122_WriteRegister(PCM5122_REG_RESET, 0x11);
 80010ac:	2111      	movs	r1, #17
 80010ae:	2001      	movs	r0, #1
 80010b0:	f7ff fd92 	bl	8000bd8 <PCM5122_WriteRegister>
 80010b4:	4603      	mov	r3, r0
 80010b6:	461a      	mov	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4413      	add	r3, r2
 80010bc:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 f9de 	bl	8001480 <HAL_Delay>
	counter += PCM5122_WriteRegister(PCM5122_REG_RESET, 0);
 80010c4:	2100      	movs	r1, #0
 80010c6:	2001      	movs	r0, #1
 80010c8:	f7ff fd86 	bl	8000bd8 <PCM5122_WriteRegister>
 80010cc:	4603      	mov	r3, r0
 80010ce:	461a      	mov	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4413      	add	r3, r2
 80010d4:	607b      	str	r3, [r7, #4]
	counter += PCM5122_SetPowerMode(PCM5122_POWER_MODE_ACTIVE);
 80010d6:	2000      	movs	r0, #0
 80010d8:	f7ff fe21 	bl	8000d1e <PCM5122_SetPowerMode>
 80010dc:	4603      	mov	r3, r0
 80010de:	461a      	mov	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4413      	add	r3, r2
 80010e4:	607b      	str	r3, [r7, #4]

	return counter;
 80010e6:	687b      	ldr	r3, [r7, #4]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <PCM5122_GetPowerState>:
 * @brief Get current power state
 *
 * @return
 */
typePowerState PCM5122_GetPowerState(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
  uint8_t regValue = PCM5122_ReadRegister(PCM5122_REG_DSP_BOOT_POWER_STATE);
 80010f6:	2076      	movs	r0, #118	; 0x76
 80010f8:	f7ff fd90 	bl	8000c1c <PCM5122_ReadRegister>
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]

  return (typePowerState)(regValue & 0x0F);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f003 030f 	and.w	r3, r3, #15
 8001106:	b2db      	uxtb	r3, r3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <PCM5122_SetVolume>:
 * 					254 = most quiet (-103dB)
 * 					255 = mute
 * @return			0 if correct communication, else wrong communication
 */
uint32_t PCM5122_SetVolume(uint8_t Volume)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
	uint32_t Counter = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]

	Counter += PCM5122_WriteRegister(PCM5122_REG_DIGITAL_VOLUME_L, Volume);
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	4619      	mov	r1, r3
 8001122:	203d      	movs	r0, #61	; 0x3d
 8001124:	f7ff fd58 	bl	8000bd8 <PCM5122_WriteRegister>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	4413      	add	r3, r2
 8001130:	60fb      	str	r3, [r7, #12]
	Counter += PCM5122_WriteRegister(PCM5122_REG_DIGITAL_VOLUME_R, Volume);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4619      	mov	r1, r3
 8001136:	203e      	movs	r0, #62	; 0x3e
 8001138:	f7ff fd4e 	bl	8000bd8 <PCM5122_WriteRegister>
 800113c:	4603      	mov	r3, r0
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]

	return Counter;
 8001146:	68fb      	ldr	r3, [r7, #12]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <PCM5122_Play>:
 *
 * @return				0 if correct communication, else wrong communication
 */

uint32_t PCM5122_Play(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint32_t counter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]

	if (PCM5122.Status == PCM5122_STOP)
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <PCM5122_Play+0x94>)
 800115c:	795b      	ldrb	r3, [r3, #5]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d13a      	bne.n	80011d8 <PCM5122_Play+0x88>
	{
		counter += PCM5122_SetPowerMode(PCM5122_POWER_MODE_STANDBY);
 8001162:	2010      	movs	r0, #16
 8001164:	f7ff fddb 	bl	8000d1e <PCM5122_SetPowerMode>
 8001168:	4603      	mov	r3, r0
 800116a:	461a      	mov	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	607b      	str	r3, [r7, #4]
		counter += PCM5122_WriteRegister(PCM5122_REG_GPIO_OUTPUT_CTRL, 0x28);
 8001172:	2128      	movs	r1, #40	; 0x28
 8001174:	2056      	movs	r0, #86	; 0x56
 8001176:	f7ff fd2f 	bl	8000bd8 <PCM5122_WriteRegister>
 800117a:	4603      	mov	r3, r0
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	607b      	str	r3, [r7, #4]

		//---Sync request = 1: Halt DAC, CP and OSR clocks as the beginning of resynchronization process
		counter += PCM5122_WriteRegister(PCM5122_REG_CLOCK_SYNC_REQUEST, 0x11);
 8001184:	2111      	movs	r1, #17
 8001186:	2013      	movs	r0, #19
 8001188:	f7ff fd26 	bl	8000bd8 <PCM5122_WriteRegister>
 800118c:	4603      	mov	r3, r0
 800118e:	461a      	mov	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4413      	add	r3, r2
 8001194:	607b      	str	r3, [r7, #4]

		//---Sync request = 0: Resume DAC, CP and OSR clocks synchronized to the beginning of audio frame
		counter += PCM5122_WriteRegister(PCM5122_REG_CLOCK_SYNC_REQUEST, 0x10);
 8001196:	2110      	movs	r1, #16
 8001198:	2013      	movs	r0, #19
 800119a:	f7ff fd1d 	bl	8000bd8 <PCM5122_WriteRegister>
 800119e:	4603      	mov	r3, r0
 80011a0:	461a      	mov	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	607b      	str	r3, [r7, #4]

		counter += PCM5122_SetPowerMode(PCM5122_POWER_MODE_ACTIVE);
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff fdb8 	bl	8000d1e <PCM5122_SetPowerMode>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	607b      	str	r3, [r7, #4]
		counter += PCM5122_SetMute(PCM5122_AUDIO_MUTE_OFF);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 f815 	bl	80011e8 <PCM5122_SetMute>
 80011be:	4602      	mov	r2, r0
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4413      	add	r3, r2
 80011c4:	607b      	str	r3, [r7, #4]

		PCM5122.Status = PCM5122_PLAY;
 80011c6:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <PCM5122_Play+0x94>)
 80011c8:	2201      	movs	r2, #1
 80011ca:	715a      	strb	r2, [r3, #5]

		PCM5122.SilentCnt = 0;
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <PCM5122_Play+0x94>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
		PCM5122.Ready = TRUE;
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <PCM5122_Play+0x94>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	711a      	strb	r2, [r3, #4]
	}

	return counter;
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000124 	.word	0x20000124

080011e8 <PCM5122_SetMute>:
 * @param Command:		AUDIO_MUTE_ON = Enable the mute.
 * 						AUDIO_MUTE_OFF = Disable the mute mode.
 * @return 0 if correct communication, else wrong communication
 */
uint32_t PCM5122_SetMute(uint32_t Command)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	uint32_t counter = 0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	60fb      	str	r3, [r7, #12]

	if (Command == PCM5122_AUDIO_MUTE_ON)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d109      	bne.n	800120e <PCM5122_SetMute+0x26>
		counter += PCM5122_WriteRegister(PCM5122_REG_MUTE, 0x11);	// Mute Enable
 80011fa:	2111      	movs	r1, #17
 80011fc:	2003      	movs	r0, #3
 80011fe:	f7ff fceb 	bl	8000bd8 <PCM5122_WriteRegister>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4413      	add	r3, r2
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	e008      	b.n	8001220 <PCM5122_SetMute+0x38>
	else
		counter += PCM5122_WriteRegister(PCM5122_REG_MUTE, 0);		// Mute Disable
 800120e:	2100      	movs	r1, #0
 8001210:	2003      	movs	r0, #3
 8001212:	f7ff fce1 	bl	8000bd8 <PCM5122_WriteRegister>
 8001216:	4603      	mov	r3, r0
 8001218:	461a      	mov	r2, r3
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	60fb      	str	r3, [r7, #12]

	return counter;
 8001220:	68fb      	ldr	r3, [r7, #12]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <PCM5122_GenerateSineWave>:
 * @param outBuffer
 * @param outBuffLen
 * @return
 */
int16_t PCM5122_GenerateSineWave(float freq, int16_t *outBuffer, int16_t outBuffLen)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	ed87 0a03 	vstr	s0, [r7, #12]
 8001236:	60b8      	str	r0, [r7, #8]
 8001238:	460b      	mov	r3, r1
 800123a:	80fb      	strh	r3, [r7, #6]
	int16_t Result;
	float sineVal;
	float sample = 50000.0f;
 800123c:	4b3d      	ldr	r3, [pc, #244]	; (8001334 <PCM5122_GenerateSineWave+0x108>)
 800123e:	61fb      	str	r3, [r7, #28]
	float sampleDt = freq / sample;
 8001240:	edd7 6a03 	vldr	s13, [r7, #12]
 8001244:	ed97 7a07 	vldr	s14, [r7, #28]
 8001248:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124c:	edc7 7a06 	vstr	s15, [r7, #24]
	float sampleN = sample / freq;
 8001250:	edd7 6a07 	vldr	s13, [r7, #28]
 8001254:	ed97 7a03 	vldr	s14, [r7, #12]
 8001258:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	if (sampleN > outBuffLen)
 8001260:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001264:	ee07 3a90 	vmov	s15, r3
 8001268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001270:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd07      	ble.n	800128a <PCM5122_GenerateSineWave+0x5e>
		sampleN = outBuffLen;
 800127a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001286:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	for (uint16_t i = 0; i < sampleN; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	847b      	strh	r3, [r7, #34]	; 0x22
 800128e:	e037      	b.n	8001300 <PCM5122_GenerateSineWave+0xd4>
	{
		sineVal = sinf(i * 2 * PI * sampleDt);
 8001290:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001338 <PCM5122_GenerateSineWave+0x10c>
 80012a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80012a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80012a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ac:	eeb0 0a67 	vmov.f32	s0, s15
 80012b0:	f003 fb86 	bl	80049c0 <sinf>
 80012b4:	ed87 0a04 	vstr	s0, [r7, #16]
		outBuffer[i * 2] = (sineVal) * 8000;
 80012b8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012bc:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800133c <PCM5122_GenerateSineWave+0x110>
 80012c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012d0:	ee17 2a90 	vmov	r2, s15
 80012d4:	b212      	sxth	r2, r2
 80012d6:	801a      	strh	r2, [r3, #0]
		outBuffer[i * 2 + 1] = (sineVal) * 8000;
 80012d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80012dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800133c <PCM5122_GenerateSineWave+0x110>
 80012e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4413      	add	r3, r2
 80012ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012f2:	ee17 2a90 	vmov	r2, s15
 80012f6:	b212      	sxth	r2, r2
 80012f8:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < sampleN; i++)
 80012fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80012fc:	3301      	adds	r3, #1
 80012fe:	847b      	strh	r3, [r7, #34]	; 0x22
 8001300:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800130e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001316:	dcbb      	bgt.n	8001290 <PCM5122_GenerateSineWave+0x64>
	}

	Result = sampleN;
 8001318:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	82fb      	strh	r3, [r7, #22]

	return Result;
 8001326:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	47435000 	.word	0x47435000
 8001338:	40490fd0 	.word	0x40490fd0
 800133c:	45fa0000 	.word	0x45fa0000

08001340 <PCM5122_PlaySineWaveSample>:
 * @brief
 *
 * @param Volume
 */
void PCM5122_PlaySineWaveSample(uint8_t Volume)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
	PCM5122_SetVolume(Volume);
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fedf 	bl	8001110 <PCM5122_SetVolume>
	PCM5122.SampleLen = PCM5122_GenerateSineWave(1500.0f, PCM5122.SampleBuff, 100);
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	480d      	ldr	r0, [pc, #52]	; (800138c <PCM5122_PlaySineWaveSample+0x4c>)
 8001356:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8001390 <PCM5122_PlaySineWaveSample+0x50>
 800135a:	f7ff ff67 	bl	800122c <PCM5122_GenerateSineWave>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <PCM5122_PlaySineWaveSample+0x54>)
 8001364:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
	PCM5122_Play();
 8001368:	f7ff fef2 	bl	8001150 <PCM5122_Play>
	HAL_I2S_Transmit_DMA(PCM5122_I2S_HANDLE, (uint16_t *)PCM5122.SampleBuff, PCM5122.SampleLen*2);
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <PCM5122_PlaySineWaveSample+0x54>)
 800136e:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	; 0xce
 8001372:	b29b      	uxth	r3, r3
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	b29b      	uxth	r3, r3
 8001378:	461a      	mov	r2, r3
 800137a:	4904      	ldr	r1, [pc, #16]	; (800138c <PCM5122_PlaySineWaveSample+0x4c>)
 800137c:	4806      	ldr	r0, [pc, #24]	; (8001398 <PCM5122_PlaySineWaveSample+0x58>)
 800137e:	f002 f8ed 	bl	800355c <HAL_I2S_Transmit_DMA>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	2000012a 	.word	0x2000012a
 8001390:	44bb8000 	.word	0x44bb8000
 8001394:	20000124 	.word	0x20000124
 8001398:	200000dc 	.word	0x200000dc

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f94f 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 f808 	bl	80013e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fae6 	bl	80009a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <HAL_InitTick+0x54>)
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x58>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 f967 	bl	80016d2 <HAL_SYSTICK_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e00e      	b.n	800142c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b0f      	cmp	r3, #15
 8001412:	d80a      	bhi.n	800142a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001414:	2200      	movs	r2, #0
 8001416:	6879      	ldr	r1, [r7, #4]
 8001418:	f04f 30ff 	mov.w	r0, #4294967295
 800141c:	f000 f92f 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001420:	4a06      	ldr	r2, [pc, #24]	; (800143c <HAL_InitTick+0x5c>)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
 8001428:	e000      	b.n	800142c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000000 	.word	0x20000000
 8001438:	20000008 	.word	0x20000008
 800143c:	20000004 	.word	0x20000004

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	; (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	20000008 	.word	0x20000008
 8001464:	200001f4 	.word	0x200001f4

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	200001f4 	.word	0x200001f4

08001480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001488:	f7ff ffee 	bl	8001468 <HAL_GetTick>
 800148c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001498:	d005      	beq.n	80014a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800149a:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_Delay+0x44>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	461a      	mov	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4413      	add	r3, r2
 80014a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014a6:	bf00      	nop
 80014a8:	f7ff ffde 	bl	8001468 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d8f7      	bhi.n	80014a8 <HAL_Delay+0x28>
  {
  }
}
 80014b8:	bf00      	nop
 80014ba:	bf00      	nop
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fa:	4a04      	ldr	r2, [pc, #16]	; (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	60d3      	str	r3, [r2, #12]
}
 8001500:	bf00      	nop
 8001502:	3714      	adds	r7, #20
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	; (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	db0b      	blt.n	8001556 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	f003 021f 	and.w	r2, r3, #31
 8001544:	4907      	ldr	r1, [pc, #28]	; (8001564 <__NVIC_EnableIRQ+0x38>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	095b      	lsrs	r3, r3, #5
 800154c:	2001      	movs	r0, #1
 800154e:	fa00 f202 	lsl.w	r2, r0, r2
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100

08001568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001578:	2b00      	cmp	r3, #0
 800157a:	db0a      	blt.n	8001592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	b2da      	uxtb	r2, r3
 8001580:	490c      	ldr	r1, [pc, #48]	; (80015b4 <__NVIC_SetPriority+0x4c>)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	440b      	add	r3, r1
 800158c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001590:	e00a      	b.n	80015a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	b2da      	uxtb	r2, r3
 8001596:	4908      	ldr	r1, [pc, #32]	; (80015b8 <__NVIC_SetPriority+0x50>)
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	f003 030f 	and.w	r3, r3, #15
 800159e:	3b04      	subs	r3, #4
 80015a0:	0112      	lsls	r2, r2, #4
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	440b      	add	r3, r1
 80015a6:	761a      	strb	r2, [r3, #24]
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000e100 	.word	0xe000e100
 80015b8:	e000ed00 	.word	0xe000ed00

080015bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b089      	sub	sp, #36	; 0x24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f1c3 0307 	rsb	r3, r3, #7
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	bf28      	it	cs
 80015da:	2304      	movcs	r3, #4
 80015dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2b06      	cmp	r3, #6
 80015e4:	d902      	bls.n	80015ec <NVIC_EncodePriority+0x30>
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3b03      	subs	r3, #3
 80015ea:	e000      	b.n	80015ee <NVIC_EncodePriority+0x32>
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43da      	mvns	r2, r3
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	401a      	ands	r2, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001604:	f04f 31ff 	mov.w	r1, #4294967295
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	fa01 f303 	lsl.w	r3, r1, r3
 800160e:	43d9      	mvns	r1, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001614:	4313      	orrs	r3, r2
         );
}
 8001616:	4618      	mov	r0, r3
 8001618:	3724      	adds	r7, #36	; 0x24
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff8e 	bl	8001568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff29 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff3e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff8e 	bl	80015bc <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5d 	bl	8001568 <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff31 	bl	800152c <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016f8:	f7ff feb6 	bl	8001468 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e099      	b.n	800183c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2202      	movs	r2, #2
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0201 	bic.w	r2, r2, #1
 8001726:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001728:	e00f      	b.n	800174a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800172a:	f7ff fe9d 	bl	8001468 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b05      	cmp	r3, #5
 8001736:	d908      	bls.n	800174a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2220      	movs	r2, #32
 800173c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2203      	movs	r2, #3
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e078      	b.n	800183c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1e8      	bne.n	800172a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	4b38      	ldr	r3, [pc, #224]	; (8001844 <HAL_DMA_Init+0x158>)
 8001764:	4013      	ands	r3, r2
 8001766:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001776:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001796:	697a      	ldr	r2, [r7, #20]
 8001798:	4313      	orrs	r3, r2
 800179a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	4313      	orrs	r3, r2
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f023 0307 	bic.w	r3, r3, #7
 80017ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d117      	bne.n	800180e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00e      	beq.n	800180e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fa6f 	bl	8001cd4 <DMA_CheckFifoParam>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2240      	movs	r2, #64	; 0x40
 8001800:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2201      	movs	r2, #1
 8001806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800180a:	2301      	movs	r3, #1
 800180c:	e016      	b.n	800183c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fa26 	bl	8001c68 <DMA_CalcBaseAndBitshift>
 800181c:	4603      	mov	r3, r0
 800181e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	223f      	movs	r2, #63	; 0x3f
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	f010803f 	.word	0xf010803f

08001848 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_DMA_Start_IT+0x26>
 800186a:	2302      	movs	r3, #2
 800186c:	e040      	b.n	80018f0 <HAL_DMA_Start_IT+0xa8>
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b01      	cmp	r3, #1
 8001880:	d12f      	bne.n	80018e2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2202      	movs	r2, #2
 8001886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	68b9      	ldr	r1, [r7, #8]
 8001896:	68f8      	ldr	r0, [r7, #12]
 8001898:	f000 f9b8 	bl	8001c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a0:	223f      	movs	r2, #63	; 0x3f
 80018a2:	409a      	lsls	r2, r3
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f042 0216 	orr.w	r2, r2, #22
 80018b6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0208 	orr.w	r2, r2, #8
 80018ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	e005      	b.n	80018ee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018ea:	2302      	movs	r3, #2
 80018ec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_DMA_IRQHandler+0x258>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a92      	ldr	r2, [pc, #584]	; (8001b54 <HAL_DMA_IRQHandler+0x25c>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0a9b      	lsrs	r3, r3, #10
 8001910:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2208      	movs	r2, #8
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d01a      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0204 	bic.w	r2, r2, #4
 800194a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001950:	2208      	movs	r2, #8
 8001952:	409a      	lsls	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	f043 0201 	orr.w	r2, r3, #1
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2201      	movs	r2, #1
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00b      	beq.n	800199a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001992:	f043 0202 	orr.w	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2204      	movs	r2, #4
 80019a0:	409a      	lsls	r2, r3
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d00b      	beq.n	80019d0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c8:	f043 0204 	orr.w	r2, r3, #4
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2210      	movs	r2, #16
 80019d6:	409a      	lsls	r2, r3
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4013      	ands	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d043      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d03c      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f2:	2210      	movs	r2, #16
 80019f4:	409a      	lsls	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d018      	beq.n	8001a3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d024      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	4798      	blx	r3
 8001a26:	e01f      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d01b      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	4798      	blx	r3
 8001a38:	e016      	b.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d107      	bne.n	8001a58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0208 	bic.w	r2, r2, #8
 8001a56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	409a      	lsls	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 808e 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 8086 	beq.w	8001b96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a8e:	2220      	movs	r2, #32
 8001a90:	409a      	lsls	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	d136      	bne.n	8001b10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0216 	bic.w	r2, r2, #22
 8001ab0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ac0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d103      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x1da>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 0208 	bic.w	r2, r2, #8
 8001ae0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae6:	223f      	movs	r2, #63	; 0x3f
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
        }
        return;
 8001b0e:	e078      	b.n	8001c02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d01c      	beq.n	8001b58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d108      	bne.n	8001b3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d030      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	4798      	blx	r3
 8001b3c:	e02b      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d027      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
 8001b4e:	e022      	b.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
 8001b50:	20000000 	.word	0x20000000
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10f      	bne.n	8001b86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0210 	bic.w	r2, r2, #16
 8001b74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d032      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d022      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2205      	movs	r2, #5
 8001bae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0201 	bic.w	r2, r2, #1
 8001bc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d307      	bcc.n	8001bde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d1f2      	bne.n	8001bc2 <HAL_DMA_IRQHandler+0x2ca>
 8001bdc:	e000      	b.n	8001be0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001bde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d005      	beq.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e000      	b.n	8001c04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c02:	bf00      	nop
    }
  }
}
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop

08001c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
 8001c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d108      	bne.n	8001c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68ba      	ldr	r2, [r7, #8]
 8001c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c4a:	e007      	b.n	8001c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	60da      	str	r2, [r3, #12]
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	3b10      	subs	r3, #16
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <DMA_CalcBaseAndBitshift+0x64>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c82:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d909      	bls.n	8001caa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c9e:	f023 0303 	bic.w	r3, r3, #3
 8001ca2:	1d1a      	adds	r2, r3, #4
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ca8:	e007      	b.n	8001cba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	aaaaaaab 	.word	0xaaaaaaab
 8001cd0:	080054c8 	.word	0x080054c8

08001cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d11f      	bne.n	8001d2e <DMA_CheckFifoParam+0x5a>
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d856      	bhi.n	8001da2 <DMA_CheckFifoParam+0xce>
 8001cf4:	a201      	add	r2, pc, #4	; (adr r2, 8001cfc <DMA_CheckFifoParam+0x28>)
 8001cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfa:	bf00      	nop
 8001cfc:	08001d0d 	.word	0x08001d0d
 8001d00:	08001d1f 	.word	0x08001d1f
 8001d04:	08001d0d 	.word	0x08001d0d
 8001d08:	08001da3 	.word	0x08001da3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d046      	beq.n	8001da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d1c:	e043      	b.n	8001da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d26:	d140      	bne.n	8001daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d2c:	e03d      	b.n	8001daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d36:	d121      	bne.n	8001d7c <DMA_CheckFifoParam+0xa8>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d837      	bhi.n	8001dae <DMA_CheckFifoParam+0xda>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <DMA_CheckFifoParam+0x70>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d5b 	.word	0x08001d5b
 8001d4c:	08001d55 	.word	0x08001d55
 8001d50:	08001d6d 	.word	0x08001d6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	73fb      	strb	r3, [r7, #15]
      break;
 8001d58:	e030      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d025      	beq.n	8001db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d6a:	e022      	b.n	8001db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d74:	d11f      	bne.n	8001db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d7a:	e01c      	b.n	8001db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d903      	bls.n	8001d8a <DMA_CheckFifoParam+0xb6>
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	2b03      	cmp	r3, #3
 8001d86:	d003      	beq.n	8001d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d88:	e018      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d8e:	e015      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001da0:	e00b      	b.n	8001dba <DMA_CheckFifoParam+0xe6>
      break;
 8001da2:	bf00      	nop
 8001da4:	e00a      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;
 8001da6:	bf00      	nop
 8001da8:	e008      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;
 8001daa:	bf00      	nop
 8001dac:	e006      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;
 8001dae:	bf00      	nop
 8001db0:	e004      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;
 8001db2:	bf00      	nop
 8001db4:	e002      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8001db6:	bf00      	nop
 8001db8:	e000      	b.n	8001dbc <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
    }
  } 
  
  return status; 
 8001dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop

08001dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b089      	sub	sp, #36	; 0x24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de2:	2300      	movs	r3, #0
 8001de4:	61fb      	str	r3, [r7, #28]
 8001de6:	e16b      	b.n	80020c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001de8:	2201      	movs	r2, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	f040 815a 	bne.w	80020ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d005      	beq.n	8001e1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d130      	bne.n	8001e80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	2203      	movs	r2, #3
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69ba      	ldr	r2, [r7, #24]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 0201 	and.w	r2, r3, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d017      	beq.n	8001ebc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f003 0303 	and.w	r3, r3, #3
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d123      	bne.n	8001f10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	691a      	ldr	r2, [r3, #16]
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	08da      	lsrs	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	3208      	adds	r2, #8
 8001f0a:	69b9      	ldr	r1, [r7, #24]
 8001f0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	2203      	movs	r2, #3
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	4013      	ands	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0203 	and.w	r2, r3, #3
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f000 80b4 	beq.w	80020ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	4b60      	ldr	r3, [pc, #384]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	4a5f      	ldr	r2, [pc, #380]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f60:	6453      	str	r3, [r2, #68]	; 0x44
 8001f62:	4b5d      	ldr	r3, [pc, #372]	; (80020d8 <HAL_GPIO_Init+0x30c>)
 8001f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f6e:	4a5b      	ldr	r2, [pc, #364]	; (80020dc <HAL_GPIO_Init+0x310>)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	220f      	movs	r2, #15
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4013      	ands	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a52      	ldr	r2, [pc, #328]	; (80020e0 <HAL_GPIO_Init+0x314>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <HAL_GPIO_Init+0x226>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a51      	ldr	r2, [pc, #324]	; (80020e4 <HAL_GPIO_Init+0x318>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d025      	beq.n	8001fee <HAL_GPIO_Init+0x222>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a50      	ldr	r2, [pc, #320]	; (80020e8 <HAL_GPIO_Init+0x31c>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01f      	beq.n	8001fea <HAL_GPIO_Init+0x21e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a4f      	ldr	r2, [pc, #316]	; (80020ec <HAL_GPIO_Init+0x320>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d019      	beq.n	8001fe6 <HAL_GPIO_Init+0x21a>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a4e      	ldr	r2, [pc, #312]	; (80020f0 <HAL_GPIO_Init+0x324>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d013      	beq.n	8001fe2 <HAL_GPIO_Init+0x216>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4d      	ldr	r2, [pc, #308]	; (80020f4 <HAL_GPIO_Init+0x328>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00d      	beq.n	8001fde <HAL_GPIO_Init+0x212>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4c      	ldr	r2, [pc, #304]	; (80020f8 <HAL_GPIO_Init+0x32c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <HAL_GPIO_Init+0x20e>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4b      	ldr	r2, [pc, #300]	; (80020fc <HAL_GPIO_Init+0x330>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d101      	bne.n	8001fd6 <HAL_GPIO_Init+0x20a>
 8001fd2:	2307      	movs	r3, #7
 8001fd4:	e00e      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fd6:	2308      	movs	r3, #8
 8001fd8:	e00c      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fda:	2306      	movs	r3, #6
 8001fdc:	e00a      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fde:	2305      	movs	r3, #5
 8001fe0:	e008      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	e006      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e004      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e002      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_GPIO_Init+0x228>
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	69fa      	ldr	r2, [r7, #28]
 8001ff6:	f002 0203 	and.w	r2, r2, #3
 8001ffa:	0092      	lsls	r2, r2, #2
 8001ffc:	4093      	lsls	r3, r2
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002004:	4935      	ldr	r1, [pc, #212]	; (80020dc <HAL_GPIO_Init+0x310>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002036:	4a32      	ldr	r2, [pc, #200]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800203c:	4b30      	ldr	r3, [pc, #192]	; (8002100 <HAL_GPIO_Init+0x334>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	43db      	mvns	r3, r3
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	4013      	ands	r3, r2
 8002074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d003      	beq.n	800208a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800208a:	4a1d      	ldr	r2, [pc, #116]	; (8002100 <HAL_GPIO_Init+0x334>)
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002090:	4b1b      	ldr	r3, [pc, #108]	; (8002100 <HAL_GPIO_Init+0x334>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	43db      	mvns	r3, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4013      	ands	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <HAL_GPIO_Init+0x334>)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3301      	adds	r3, #1
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	2b0f      	cmp	r3, #15
 80020c4:	f67f ae90 	bls.w	8001de8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40013800 	.word	0x40013800
 80020e0:	40020000 	.word	0x40020000
 80020e4:	40020400 	.word	0x40020400
 80020e8:	40020800 	.word	0x40020800
 80020ec:	40020c00 	.word	0x40020c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40021400 	.word	0x40021400
 80020f8:	40021800 	.word	0x40021800
 80020fc:	40021c00 	.word	0x40021c00
 8002100:	40013c00 	.word	0x40013c00

08002104 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
 800211e:	e0cd      	b.n	80022bc <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002120:	2201      	movs	r2, #1
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	429a      	cmp	r2, r3
 8002138:	f040 80bd 	bne.w	80022b6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800213c:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <HAL_GPIO_DeInit+0x1d0>)
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	3302      	adds	r3, #2
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	f003 0303 	and.w	r3, r3, #3
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	220f      	movs	r2, #15
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	4013      	ands	r3, r2
 800215c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a5d      	ldr	r2, [pc, #372]	; (80022d8 <HAL_GPIO_DeInit+0x1d4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <HAL_GPIO_DeInit+0xba>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a5c      	ldr	r2, [pc, #368]	; (80022dc <HAL_GPIO_DeInit+0x1d8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_DeInit+0xb6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a5b      	ldr	r2, [pc, #364]	; (80022e0 <HAL_GPIO_DeInit+0x1dc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_DeInit+0xb2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a5a      	ldr	r2, [pc, #360]	; (80022e4 <HAL_GPIO_DeInit+0x1e0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_DeInit+0xae>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a59      	ldr	r2, [pc, #356]	; (80022e8 <HAL_GPIO_DeInit+0x1e4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_DeInit+0xaa>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a58      	ldr	r2, [pc, #352]	; (80022ec <HAL_GPIO_DeInit+0x1e8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_DeInit+0xa6>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a57      	ldr	r2, [pc, #348]	; (80022f0 <HAL_GPIO_DeInit+0x1ec>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_DeInit+0xa2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <HAL_GPIO_DeInit+0x1f0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_DeInit+0x9e>
 800219e:	2307      	movs	r3, #7
 80021a0:	e00e      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021a2:	2308      	movs	r3, #8
 80021a4:	e00c      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021a6:	2306      	movs	r3, #6
 80021a8:	e00a      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021aa:	2305      	movs	r3, #5
 80021ac:	e008      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021ae:	2304      	movs	r3, #4
 80021b0:	e006      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021b2:	2303      	movs	r3, #3
 80021b4:	e004      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021b6:	2302      	movs	r3, #2
 80021b8:	e002      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_GPIO_DeInit+0xbc>
 80021be:	2300      	movs	r3, #0
 80021c0:	697a      	ldr	r2, [r7, #20]
 80021c2:	f002 0203 	and.w	r2, r2, #3
 80021c6:	0092      	lsls	r2, r2, #2
 80021c8:	4093      	lsls	r3, r2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d132      	bne.n	8002236 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80021d0:	4b49      	ldr	r3, [pc, #292]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	43db      	mvns	r3, r3
 80021d8:	4947      	ldr	r1, [pc, #284]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80021de:	4b46      	ldr	r3, [pc, #280]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4944      	ldr	r1, [pc, #272]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80021ec:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	4940      	ldr	r1, [pc, #256]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021f6:	4013      	ands	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	43db      	mvns	r3, r3
 8002202:	493d      	ldr	r1, [pc, #244]	; (80022f8 <HAL_GPIO_DeInit+0x1f4>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	220f      	movs	r2, #15
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002218:	4a2e      	ldr	r2, [pc, #184]	; (80022d4 <HAL_GPIO_DeInit+0x1d0>)
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	43da      	mvns	r2, r3
 8002228:	482a      	ldr	r0, [pc, #168]	; (80022d4 <HAL_GPIO_DeInit+0x1d0>)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	400a      	ands	r2, r1
 8002230:	3302      	adds	r3, #2
 8002232:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2103      	movs	r1, #3
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	401a      	ands	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	08da      	lsrs	r2, r3, #3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3208      	adds	r2, #8
 8002254:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	697a      	ldr	r2, [r7, #20]
 800226a:	08d2      	lsrs	r2, r2, #3
 800226c:	4019      	ands	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68da      	ldr	r2, [r3, #12]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2103      	movs	r1, #3
 8002280:	fa01 f303 	lsl.w	r3, r1, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	401a      	ands	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	2101      	movs	r1, #1
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	401a      	ands	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2103      	movs	r1, #3
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	401a      	ands	r2, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	3301      	adds	r3, #1
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2b0f      	cmp	r3, #15
 80022c0:	f67f af2e 	bls.w	8002120 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80022c4:	bf00      	nop
 80022c6:	bf00      	nop
 80022c8:	371c      	adds	r7, #28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40013800 	.word	0x40013800
 80022d8:	40020000 	.word	0x40020000
 80022dc:	40020400 	.word	0x40020400
 80022e0:	40020800 	.word	0x40020800
 80022e4:	40020c00 	.word	0x40020c00
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40021400 	.word	0x40021400
 80022f0:	40021800 	.word	0x40021800
 80022f4:	40021c00 	.word	0x40021c00
 80022f8:	40013c00 	.word	0x40013c00

080022fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e12b      	b.n	8002566 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7fe f95e 	bl	80005e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800234e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800235e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002360:	f002 f9ae 	bl	80046c0 <HAL_RCC_GetPCLK1Freq>
 8002364:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4a81      	ldr	r2, [pc, #516]	; (8002570 <HAL_I2C_Init+0x274>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d807      	bhi.n	8002380 <HAL_I2C_Init+0x84>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	4a80      	ldr	r2, [pc, #512]	; (8002574 <HAL_I2C_Init+0x278>)
 8002374:	4293      	cmp	r3, r2
 8002376:	bf94      	ite	ls
 8002378:	2301      	movls	r3, #1
 800237a:	2300      	movhi	r3, #0
 800237c:	b2db      	uxtb	r3, r3
 800237e:	e006      	b.n	800238e <HAL_I2C_Init+0x92>
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4a7d      	ldr	r2, [pc, #500]	; (8002578 <HAL_I2C_Init+0x27c>)
 8002384:	4293      	cmp	r3, r2
 8002386:	bf94      	ite	ls
 8002388:	2301      	movls	r3, #1
 800238a:	2300      	movhi	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e0e7      	b.n	8002566 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a78      	ldr	r2, [pc, #480]	; (800257c <HAL_I2C_Init+0x280>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	0c9b      	lsrs	r3, r3, #18
 80023a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4a6a      	ldr	r2, [pc, #424]	; (8002570 <HAL_I2C_Init+0x274>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d802      	bhi.n	80023d0 <HAL_I2C_Init+0xd4>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	e009      	b.n	80023e4 <HAL_I2C_Init+0xe8>
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023d6:	fb02 f303 	mul.w	r3, r2, r3
 80023da:	4a69      	ldr	r2, [pc, #420]	; (8002580 <HAL_I2C_Init+0x284>)
 80023dc:	fba2 2303 	umull	r2, r3, r2, r3
 80023e0:	099b      	lsrs	r3, r3, #6
 80023e2:	3301      	adds	r3, #1
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	495c      	ldr	r1, [pc, #368]	; (8002570 <HAL_I2C_Init+0x274>)
 8002400:	428b      	cmp	r3, r1
 8002402:	d819      	bhi.n	8002438 <HAL_I2C_Init+0x13c>
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1e59      	subs	r1, r3, #1
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002412:	1c59      	adds	r1, r3, #1
 8002414:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002418:	400b      	ands	r3, r1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d00a      	beq.n	8002434 <HAL_I2C_Init+0x138>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1e59      	subs	r1, r3, #1
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fbb1 f3f3 	udiv	r3, r1, r3
 800242c:	3301      	adds	r3, #1
 800242e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002432:	e051      	b.n	80024d8 <HAL_I2C_Init+0x1dc>
 8002434:	2304      	movs	r3, #4
 8002436:	e04f      	b.n	80024d8 <HAL_I2C_Init+0x1dc>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <HAL_I2C_Init+0x168>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	1e58      	subs	r0, r3, #1
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6859      	ldr	r1, [r3, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	440b      	add	r3, r1
 800244e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002452:	3301      	adds	r3, #1
 8002454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf0c      	ite	eq
 800245c:	2301      	moveq	r3, #1
 800245e:	2300      	movne	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	e012      	b.n	800248a <HAL_I2C_Init+0x18e>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	0099      	lsls	r1, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	fbb0 f3f3 	udiv	r3, r0, r3
 800247a:	3301      	adds	r3, #1
 800247c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002480:	2b00      	cmp	r3, #0
 8002482:	bf0c      	ite	eq
 8002484:	2301      	moveq	r3, #1
 8002486:	2300      	movne	r3, #0
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <HAL_I2C_Init+0x196>
 800248e:	2301      	movs	r3, #1
 8002490:	e022      	b.n	80024d8 <HAL_I2C_Init+0x1dc>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10e      	bne.n	80024b8 <HAL_I2C_Init+0x1bc>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	1e58      	subs	r0, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6859      	ldr	r1, [r3, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	440b      	add	r3, r1
 80024a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ac:	3301      	adds	r3, #1
 80024ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024b6:	e00f      	b.n	80024d8 <HAL_I2C_Init+0x1dc>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	1e58      	subs	r0, r3, #1
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6859      	ldr	r1, [r3, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	0099      	lsls	r1, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d8:	6879      	ldr	r1, [r7, #4]
 80024da:	6809      	ldr	r1, [r1, #0]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002506:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	6911      	ldr	r1, [r2, #16]
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	4311      	orrs	r1, r2
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	430b      	orrs	r3, r1
 800251a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	431a      	orrs	r2, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2220      	movs	r2, #32
 8002552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3710      	adds	r7, #16
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	000186a0 	.word	0x000186a0
 8002574:	001e847f 	.word	0x001e847f
 8002578:	003d08ff 	.word	0x003d08ff
 800257c:	431bde83 	.word	0x431bde83
 8002580:	10624dd3 	.word	0x10624dd3

08002584 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e021      	b.n	80025da <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2224      	movs	r2, #36	; 0x24
 800259a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 0201 	bic.w	r2, r2, #1
 80025ac:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe f860 	bl	8000674 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	4608      	mov	r0, r1
 80025ee:	4611      	mov	r1, r2
 80025f0:	461a      	mov	r2, r3
 80025f2:	4603      	mov	r3, r0
 80025f4:	817b      	strh	r3, [r7, #10]
 80025f6:	460b      	mov	r3, r1
 80025f8:	813b      	strh	r3, [r7, #8]
 80025fa:	4613      	mov	r3, r2
 80025fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fe:	f7fe ff33 	bl	8001468 <HAL_GetTick>
 8002602:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b20      	cmp	r3, #32
 800260e:	f040 80d9 	bne.w	80027c4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2319      	movs	r3, #25
 8002618:	2201      	movs	r2, #1
 800261a:	496d      	ldr	r1, [pc, #436]	; (80027d0 <HAL_I2C_Mem_Write+0x1ec>)
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 fc7f 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002628:	2302      	movs	r3, #2
 800262a:	e0cc      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002632:	2b01      	cmp	r3, #1
 8002634:	d101      	bne.n	800263a <HAL_I2C_Mem_Write+0x56>
 8002636:	2302      	movs	r3, #2
 8002638:	e0c5      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0301 	and.w	r3, r3, #1
 800264c:	2b01      	cmp	r3, #1
 800264e:	d007      	beq.n	8002660 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2221      	movs	r2, #33	; 0x21
 8002674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2240      	movs	r2, #64	; 0x40
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	2200      	movs	r2, #0
 8002684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6a3a      	ldr	r2, [r7, #32]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002690:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a4d      	ldr	r2, [pc, #308]	; (80027d4 <HAL_I2C_Mem_Write+0x1f0>)
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026a2:	88f8      	ldrh	r0, [r7, #6]
 80026a4:	893a      	ldrh	r2, [r7, #8]
 80026a6:	8979      	ldrh	r1, [r7, #10]
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	4603      	mov	r3, r0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f000 fab6 	bl	8002c24 <I2C_RequestMemoryWrite>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d052      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e081      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fd00 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00d      	beq.n	80026ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d107      	bne.n	80026ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e06b      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	781a      	ldrb	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	1c5a      	adds	r2, r3, #1
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	b29a      	uxth	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b04      	cmp	r3, #4
 800272a:	d11b      	bne.n	8002764 <HAL_I2C_Mem_Write+0x180>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002730:	2b00      	cmp	r3, #0
 8002732:	d017      	beq.n	8002764 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	1c5a      	adds	r2, r3, #1
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1aa      	bne.n	80026c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 fcec 	bl	800314e <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e016      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e000      	b.n	80027c6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80027c4:	2302      	movs	r3, #2
  }
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	00100002 	.word	0x00100002
 80027d4:	ffff0000 	.word	0xffff0000

080027d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08c      	sub	sp, #48	; 0x30
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	4608      	mov	r0, r1
 80027e2:	4611      	mov	r1, r2
 80027e4:	461a      	mov	r2, r3
 80027e6:	4603      	mov	r3, r0
 80027e8:	817b      	strh	r3, [r7, #10]
 80027ea:	460b      	mov	r3, r1
 80027ec:	813b      	strh	r3, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027f2:	f7fe fe39 	bl	8001468 <HAL_GetTick>
 80027f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027fe:	b2db      	uxtb	r3, r3
 8002800:	2b20      	cmp	r3, #32
 8002802:	f040 8208 	bne.w	8002c16 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	2319      	movs	r3, #25
 800280c:	2201      	movs	r2, #1
 800280e:	497b      	ldr	r1, [pc, #492]	; (80029fc <HAL_I2C_Mem_Read+0x224>)
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fb85 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800281c:	2302      	movs	r3, #2
 800281e:	e1fb      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002826:	2b01      	cmp	r3, #1
 8002828:	d101      	bne.n	800282e <HAL_I2C_Mem_Read+0x56>
 800282a:	2302      	movs	r3, #2
 800282c:	e1f4      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2201      	movs	r2, #1
 8002832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	d007      	beq.n	8002854 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002862:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2222      	movs	r2, #34	; 0x22
 8002868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29a      	uxth	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	4a5b      	ldr	r2, [pc, #364]	; (8002a00 <HAL_I2C_Mem_Read+0x228>)
 8002894:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002896:	88f8      	ldrh	r0, [r7, #6]
 8002898:	893a      	ldrh	r2, [r7, #8]
 800289a:	8979      	ldrh	r1, [r7, #10]
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4603      	mov	r3, r0
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa52 	bl	8002d50 <I2C_RequestMemoryRead>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1b0      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d113      	bne.n	80028e6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	695b      	ldr	r3, [r3, #20]
 80028c8:	623b      	str	r3, [r7, #32]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	e184      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d11b      	bne.n	8002926 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028fe:	2300      	movs	r3, #0
 8002900:	61fb      	str	r3, [r7, #28]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e164      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800292a:	2b02      	cmp	r3, #2
 800292c:	d11b      	bne.n	8002966 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800293c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	e144      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695b      	ldr	r3, [r3, #20]
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800297c:	e138      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002982:	2b03      	cmp	r3, #3
 8002984:	f200 80f1 	bhi.w	8002b6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	2b01      	cmp	r3, #1
 800298e:	d123      	bne.n	80029d8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002992:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f000 fc1b 	bl	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e139      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	1c5a      	adds	r2, r3, #1
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	3b01      	subs	r3, #1
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029d6:	e10b      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029dc:	2b02      	cmp	r3, #2
 80029de:	d14e      	bne.n	8002a7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e6:	2200      	movs	r2, #0
 80029e8:	4906      	ldr	r1, [pc, #24]	; (8002a04 <HAL_I2C_Mem_Read+0x22c>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 fa98 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d008      	beq.n	8002a08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e10e      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
 80029fa:	bf00      	nop
 80029fc:	00100002 	.word	0x00100002
 8002a00:	ffff0000 	.word	0xffff0000
 8002a04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	691a      	ldr	r2, [r3, #16]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a7c:	e0b8      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a84:	2200      	movs	r2, #0
 8002a86:	4966      	ldr	r1, [pc, #408]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 fa49 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0bf      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aa6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691a      	ldr	r2, [r3, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	494f      	ldr	r1, [pc, #316]	; (8002c20 <HAL_I2C_Mem_Read+0x448>)
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 fa1b 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e091      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	1c5a      	adds	r2, r3, #1
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b20:	3b01      	subs	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	b2d2      	uxtb	r2, r2
 8002b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	1c5a      	adds	r2, r3, #1
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b68:	e042      	b.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fb2e 	bl	80031d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e04c      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691a      	ldr	r2, [r3, #16]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	b2d2      	uxtb	r2, r2
 8002b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d118      	bne.n	8002bf0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	691a      	ldr	r2, [r3, #16]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	b2d2      	uxtb	r2, r2
 8002bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	1c5a      	adds	r2, r3, #1
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	3b01      	subs	r3, #1
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	f47f aec2 	bne.w	800297e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	e000      	b.n	8002c18 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002c16:	2302      	movs	r3, #2
  }
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	00010004 	.word	0x00010004

08002c24 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af02      	add	r7, sp, #8
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	4608      	mov	r0, r1
 8002c2e:	4611      	mov	r1, r2
 8002c30:	461a      	mov	r2, r3
 8002c32:	4603      	mov	r3, r0
 8002c34:	817b      	strh	r3, [r7, #10]
 8002c36:	460b      	mov	r3, r1
 8002c38:	813b      	strh	r3, [r7, #8]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	2200      	movs	r2, #0
 8002c56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f960 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c74:	d103      	bne.n	8002c7e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e05f      	b.n	8002d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c82:	897b      	ldrh	r3, [r7, #10]
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	6a3a      	ldr	r2, [r7, #32]
 8002c96:	492d      	ldr	r1, [pc, #180]	; (8002d4c <I2C_RequestMemoryWrite+0x128>)
 8002c98:	68f8      	ldr	r0, [r7, #12]
 8002c9a:	f000 f998 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d001      	beq.n	8002ca8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e04c      	b.n	8002d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cc0:	6a39      	ldr	r1, [r7, #32]
 8002cc2:	68f8      	ldr	r0, [r7, #12]
 8002cc4:	f000 fa02 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00d      	beq.n	8002cea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd2:	2b04      	cmp	r3, #4
 8002cd4:	d107      	bne.n	8002ce6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ce4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e02b      	b.n	8002d42 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cea:	88fb      	ldrh	r3, [r7, #6]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d105      	bne.n	8002cfc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf0:	893b      	ldrh	r3, [r7, #8]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e021      	b.n	8002d40 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cfc:	893b      	ldrh	r3, [r7, #8]
 8002cfe:	0a1b      	lsrs	r3, r3, #8
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	6a39      	ldr	r1, [r7, #32]
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f000 f9dc 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00d      	beq.n	8002d36 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d107      	bne.n	8002d32 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e005      	b.n	8002d42 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d36:	893b      	ldrh	r3, [r7, #8]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3718      	adds	r7, #24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	00010002 	.word	0x00010002

08002d50 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af02      	add	r7, sp, #8
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	4608      	mov	r0, r1
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4603      	mov	r3, r0
 8002d60:	817b      	strh	r3, [r7, #10]
 8002d62:	460b      	mov	r3, r1
 8002d64:	813b      	strh	r3, [r7, #8]
 8002d66:	4613      	mov	r3, r2
 8002d68:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d78:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d88:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	f000 f8c2 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00d      	beq.n	8002dbe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002db0:	d103      	bne.n	8002dba <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002db8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e0aa      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dbe:	897b      	ldrh	r3, [r7, #10]
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dcc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	6a3a      	ldr	r2, [r7, #32]
 8002dd2:	4952      	ldr	r1, [pc, #328]	; (8002f1c <I2C_RequestMemoryRead+0x1cc>)
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f8fa 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e097      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de4:	2300      	movs	r3, #0
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	617b      	str	r3, [r7, #20]
 8002df8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f964 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00d      	beq.n	8002e26 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d107      	bne.n	8002e22 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e20:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e076      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e26:	88fb      	ldrh	r3, [r7, #6]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d105      	bne.n	8002e38 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e2c:	893b      	ldrh	r3, [r7, #8]
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	611a      	str	r2, [r3, #16]
 8002e36:	e021      	b.n	8002e7c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e38:	893b      	ldrh	r3, [r7, #8]
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	b2da      	uxtb	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e48:	6a39      	ldr	r1, [r7, #32]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f93e 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00d      	beq.n	8002e72 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d107      	bne.n	8002e6e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e6c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e050      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e72:	893b      	ldrh	r3, [r7, #8]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7e:	6a39      	ldr	r1, [r7, #32]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f923 	bl	80030cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	2b04      	cmp	r3, #4
 8002e92:	d107      	bne.n	8002ea4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ea2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e035      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002eb6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f82b 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d00d      	beq.n	8002eec <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ede:	d103      	bne.n	8002ee8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e013      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eec:	897b      	ldrh	r3, [r7, #10]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	f043 0301 	orr.w	r3, r3, #1
 8002ef4:	b2da      	uxtb	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	6a3a      	ldr	r2, [r7, #32]
 8002f00:	4906      	ldr	r1, [pc, #24]	; (8002f1c <I2C_RequestMemoryRead+0x1cc>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f863 	bl	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3718      	adds	r7, #24
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	00010002 	.word	0x00010002

08002f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	e025      	b.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d021      	beq.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe fa95 	bl	8001468 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d116      	bne.n	8002f7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f043 0220 	orr.w	r2, r3, #32
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e023      	b.n	8002fc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	0c1b      	lsrs	r3, r3, #16
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d10d      	bne.n	8002fa4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	43da      	mvns	r2, r3
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4013      	ands	r3, r2
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	bf0c      	ite	eq
 8002f9a:	2301      	moveq	r3, #1
 8002f9c:	2300      	movne	r3, #0
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	e00c      	b.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	43da      	mvns	r2, r3
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	bf0c      	ite	eq
 8002fb6:	2301      	moveq	r3, #1
 8002fb8:	2300      	movne	r3, #0
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d0b6      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b084      	sub	sp, #16
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
 8002fda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fdc:	e051      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695b      	ldr	r3, [r3, #20]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fec:	d123      	bne.n	8003036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ffc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003006:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e046      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d021      	beq.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fa13 	bl	8001468 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d116      	bne.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2220      	movs	r2, #32
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0220 	orr.w	r2, r3, #32
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e020      	b.n	80030c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10c      	bne.n	80030a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	43da      	mvns	r2, r3
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	4013      	ands	r3, r2
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf14      	ite	ne
 800309e:	2301      	movne	r3, #1
 80030a0:	2300      	moveq	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	e00b      	b.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	699b      	ldr	r3, [r3, #24]
 80030ac:	43da      	mvns	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4013      	ands	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	bf14      	ite	ne
 80030b8:	2301      	movne	r3, #1
 80030ba:	2300      	moveq	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d18d      	bne.n	8002fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3710      	adds	r7, #16
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030d8:	e02d      	b.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f000 f8ce 	bl	800327c <I2C_IsAcknowledgeFailed>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e02d      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d021      	beq.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030f2:	f7fe f9b9 	bl	8001468 <HAL_GetTick>
 80030f6:	4602      	mov	r2, r0
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d302      	bcc.n	8003108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d116      	bne.n	8003136 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2220      	movs	r2, #32
 8003112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	f043 0220 	orr.w	r2, r3, #32
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e007      	b.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003140:	2b80      	cmp	r3, #128	; 0x80
 8003142:	d1ca      	bne.n	80030da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314e:	b580      	push	{r7, lr}
 8003150:	b084      	sub	sp, #16
 8003152:	af00      	add	r7, sp, #0
 8003154:	60f8      	str	r0, [r7, #12]
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800315a:	e02d      	b.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 f88d 	bl	800327c <I2C_IsAcknowledgeFailed>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e02d      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d021      	beq.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003174:	f7fe f978 	bl	8001468 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	68ba      	ldr	r2, [r7, #8]
 8003180:	429a      	cmp	r2, r3
 8003182:	d302      	bcc.n	800318a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2200      	movs	r2, #0
 800318e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e007      	b.n	80031c8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b04      	cmp	r3, #4
 80031c4:	d1ca      	bne.n	800315c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031dc:	e042      	b.n	8003264 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0310 	and.w	r3, r3, #16
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d119      	bne.n	8003220 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0210 	mvn.w	r2, #16
 80031f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2200      	movs	r2, #0
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e029      	b.n	8003274 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003220:	f7fe f922 	bl	8001468 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	68ba      	ldr	r2, [r7, #8]
 800322c:	429a      	cmp	r2, r3
 800322e:	d302      	bcc.n	8003236 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d116      	bne.n	8003264 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2220      	movs	r2, #32
 8003240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	f043 0220 	orr.w	r2, r3, #32
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e007      	b.n	8003274 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	d1b5      	bne.n	80031de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d11b      	bne.n	80032cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800329c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	f043 0204 	orr.w	r2, r3, #4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
	...

080032dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b088      	sub	sp, #32
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e128      	b.n	8003540 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_I2S_Init+0x26c>)
 8003306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7fd fa11 	bl	8000730 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69db      	ldr	r3, [r3, #28]
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003324:	f023 030f 	bic.w	r3, r3, #15
 8003328:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2202      	movs	r2, #2
 8003330:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	695b      	ldr	r3, [r3, #20]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d060      	beq.n	80033fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003342:	2310      	movs	r3, #16
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e001      	b.n	800334c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003348:	2320      	movs	r3, #32
 800334a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	2b20      	cmp	r3, #32
 8003352:	d802      	bhi.n	800335a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	005b      	lsls	r3, r3, #1
 8003358:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800335a:	2001      	movs	r0, #1
 800335c:	f001 faa6 	bl	80048ac <HAL_RCCEx_GetPeriphCLKFreq>
 8003360:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800336a:	d125      	bne.n	80033b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	68fa      	ldr	r2, [r7, #12]
 800337a:	fbb2 f2f3 	udiv	r2, r2, r3
 800337e:	4613      	mov	r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	461a      	mov	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003390:	3305      	adds	r3, #5
 8003392:	613b      	str	r3, [r7, #16]
 8003394:	e01f      	b.n	80033d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	fbb2 f2f3 	udiv	r2, r2, r3
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b2:	3305      	adds	r3, #5
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	e00e      	b.n	80033d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	461a      	mov	r2, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d2:	3305      	adds	r3, #5
 80033d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4a5c      	ldr	r2, [pc, #368]	; (800354c <HAL_I2S_Init+0x270>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	08db      	lsrs	r3, r3, #3
 80033e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	085b      	lsrs	r3, r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	e003      	b.n	8003404 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033fc:	2302      	movs	r3, #2
 80033fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d902      	bls.n	8003410 <HAL_I2S_Init+0x134>
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	2bff      	cmp	r3, #255	; 0xff
 800340e:	d907      	bls.n	8003420 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f043 0210 	orr.w	r2, r3, #16
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e08f      	b.n	8003540 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691a      	ldr	r2, [r3, #16]
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	ea42 0103 	orr.w	r1, r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	69fa      	ldr	r2, [r7, #28]
 8003430:	430a      	orrs	r2, r1
 8003432:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800343e:	f023 030f 	bic.w	r3, r3, #15
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6851      	ldr	r1, [r2, #4]
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6892      	ldr	r2, [r2, #8]
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	4311      	orrs	r1, r2
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6992      	ldr	r2, [r2, #24]
 8003456:	430a      	orrs	r2, r1
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003462:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d161      	bne.n	8003530 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a38      	ldr	r2, [pc, #224]	; (8003550 <HAL_I2S_Init+0x274>)
 8003470:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a37      	ldr	r2, [pc, #220]	; (8003554 <HAL_I2S_Init+0x278>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d101      	bne.n	8003480 <HAL_I2S_Init+0x1a4>
 800347c:	4b36      	ldr	r3, [pc, #216]	; (8003558 <HAL_I2S_Init+0x27c>)
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x1a8>
 8003480:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6812      	ldr	r2, [r2, #0]
 800348a:	4932      	ldr	r1, [pc, #200]	; (8003554 <HAL_I2S_Init+0x278>)
 800348c:	428a      	cmp	r2, r1
 800348e:	d101      	bne.n	8003494 <HAL_I2S_Init+0x1b8>
 8003490:	4a31      	ldr	r2, [pc, #196]	; (8003558 <HAL_I2S_Init+0x27c>)
 8003492:	e001      	b.n	8003498 <HAL_I2S_Init+0x1bc>
 8003494:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003498:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800349c:	f023 030f 	bic.w	r3, r3, #15
 80034a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2b      	ldr	r2, [pc, #172]	; (8003554 <HAL_I2S_Init+0x278>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d101      	bne.n	80034b0 <HAL_I2S_Init+0x1d4>
 80034ac:	4b2a      	ldr	r3, [pc, #168]	; (8003558 <HAL_I2S_Init+0x27c>)
 80034ae:	e001      	b.n	80034b4 <HAL_I2S_Init+0x1d8>
 80034b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034b4:	2202      	movs	r2, #2
 80034b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a25      	ldr	r2, [pc, #148]	; (8003554 <HAL_I2S_Init+0x278>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d101      	bne.n	80034c6 <HAL_I2S_Init+0x1ea>
 80034c2:	4b25      	ldr	r3, [pc, #148]	; (8003558 <HAL_I2S_Init+0x27c>)
 80034c4:	e001      	b.n	80034ca <HAL_I2S_Init+0x1ee>
 80034c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034d6:	d003      	beq.n	80034e0 <HAL_I2S_Init+0x204>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	e001      	b.n	80034ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003500:	4313      	orrs	r3, r2
 8003502:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800350a:	4313      	orrs	r3, r2
 800350c:	b29a      	uxth	r2, r3
 800350e:	897b      	ldrh	r3, [r7, #10]
 8003510:	4313      	orrs	r3, r2
 8003512:	b29b      	uxth	r3, r3
 8003514:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003518:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <HAL_I2S_Init+0x278>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d101      	bne.n	8003528 <HAL_I2S_Init+0x24c>
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_I2S_Init+0x27c>)
 8003526:	e001      	b.n	800352c <HAL_I2S_Init+0x250>
 8003528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800352c:	897a      	ldrh	r2, [r7, #10]
 800352e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3720      	adds	r7, #32
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	08003861 	.word	0x08003861
 800354c:	cccccccd 	.word	0xcccccccd
 8003550:	08003975 	.word	0x08003975
 8003554:	40003800 	.word	0x40003800
 8003558:	40003400 	.word	0x40003400

0800355c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b086      	sub	sp, #24
 8003560:	af00      	add	r7, sp, #0
 8003562:	60f8      	str	r0, [r7, #12]
 8003564:	60b9      	str	r1, [r7, #8]
 8003566:	4613      	mov	r3, r2
 8003568:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <HAL_I2S_Transmit_DMA+0x1a>
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e08e      	b.n	8003698 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b01      	cmp	r3, #1
 8003584:	d101      	bne.n	800358a <HAL_I2S_Transmit_DMA+0x2e>
 8003586:	2302      	movs	r3, #2
 8003588:	e086      	b.n	8003698 <HAL_I2S_Transmit_DMA+0x13c>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d005      	beq.n	80035aa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80035a6:	2302      	movs	r3, #2
 80035a8:	e076      	b.n	8003698 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2203      	movs	r2, #3
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68ba      	ldr	r2, [r7, #8]
 80035bc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b03      	cmp	r3, #3
 80035ce:	d002      	beq.n	80035d6 <HAL_I2S_Transmit_DMA+0x7a>
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d10a      	bne.n	80035ec <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80035d6:	88fb      	ldrh	r3, [r7, #6]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	b29a      	uxth	r2, r3
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80035e0:	88fb      	ldrh	r3, [r7, #6]
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035ea:	e005      	b.n	80035f8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	88fa      	ldrh	r2, [r7, #6]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	88fa      	ldrh	r2, [r7, #6]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035fc:	4a28      	ldr	r2, [pc, #160]	; (80036a0 <HAL_I2S_Transmit_DMA+0x144>)
 80035fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003604:	4a27      	ldr	r2, [pc, #156]	; (80036a4 <HAL_I2S_Transmit_DMA+0x148>)
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360c:	4a26      	ldr	r2, [pc, #152]	; (80036a8 <HAL_I2S_Transmit_DMA+0x14c>)
 800360e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003618:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003620:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8003628:	f7fe f90e 	bl	8001848 <HAL_DMA_Start_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00f      	beq.n	8003652 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f043 0208 	orr.w	r2, r3, #8
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e022      	b.n	8003698 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69db      	ldr	r3, [r3, #28]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d107      	bne.n	8003670 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800366e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d107      	bne.n	800368e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0202 	orr.w	r2, r2, #2
 800368c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8003696:	2300      	movs	r3, #0
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	0800373f 	.word	0x0800373f
 80036a4:	080036fd 	.word	0x080036fd
 80036a8:	0800375b 	.word	0x0800375b

080036ac <HAL_I2S_TxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxHalfCpltCallback could be implemented in the user file
   */
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036c8:	bf00      	nop
 80036ca:	370c      	adds	r7, #12
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr

080036d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d10e      	bne.n	8003730 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0202 	bic.w	r2, r2, #2
 8003720:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7ff ffc5 	bl	80036c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f7ff ffad 	bl	80036ac <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003752:	bf00      	nop
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b084      	sub	sp, #16
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685a      	ldr	r2, [r3, #4]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f022 0203 	bic.w	r2, r2, #3
 8003776:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f043 0208 	orr.w	r2, r3, #8
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff ffa5 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800379e:	bf00      	nop
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b082      	sub	sp, #8
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	881a      	ldrh	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c9a      	adds	r2, r3, #2
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10e      	bne.n	80037fa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff ff63 	bl	80036c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037fa:	bf00      	nop
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b082      	sub	sp, #8
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003814:	b292      	uxth	r2, r2
 8003816:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	1c9a      	adds	r2, r3, #2
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003834:	b29b      	uxth	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10e      	bne.n	8003858 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003848:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff3e 	bl	80036d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b04      	cmp	r3, #4
 800387a:	d13a      	bne.n	80038f2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b01      	cmp	r3, #1
 8003884:	d109      	bne.n	800389a <I2S_IRQHandler+0x3a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d102      	bne.n	800389a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7ff ffb4 	bl	8003802 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d126      	bne.n	80038f2 <I2S_IRQHandler+0x92>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0320 	and.w	r3, r3, #32
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d11f      	bne.n	80038f2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038c0:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c2:	2300      	movs	r3, #0
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fefb 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b03      	cmp	r3, #3
 80038fc:	d136      	bne.n	800396c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b02      	cmp	r3, #2
 8003906:	d109      	bne.n	800391c <I2S_IRQHandler+0xbc>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b80      	cmp	r3, #128	; 0x80
 8003914:	d102      	bne.n	800391c <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff45 	bl	80037a6 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b08      	cmp	r3, #8
 8003924:	d122      	bne.n	800396c <I2S_IRQHandler+0x10c>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 0320 	and.w	r3, r3, #32
 8003930:	2b20      	cmp	r3, #32
 8003932:	d11b      	bne.n	800396c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003942:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60fb      	str	r3, [r7, #12]
 8003950:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395e:	f043 0204 	orr.w	r2, r3, #4
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff febe 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800396c:	bf00      	nop
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4aa2      	ldr	r2, [pc, #648]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d101      	bne.n	8003992 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800398e:	4ba2      	ldr	r3, [pc, #648]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003990:	e001      	b.n	8003996 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003992:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a9b      	ldr	r2, [pc, #620]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d101      	bne.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80039ac:	4b9a      	ldr	r3, [pc, #616]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ae:	e001      	b.n	80039b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80039b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c0:	d004      	beq.n	80039cc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f040 8099 	bne.w	8003afe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d107      	bne.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f925 	bl	8003c30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	f003 0301 	and.w	r3, r3, #1
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d107      	bne.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d002      	beq.n	8003a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f9c8 	bl	8003d90 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a06:	2b40      	cmp	r3, #64	; 0x40
 8003a08:	d13a      	bne.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d035      	beq.n	8003a80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a7e      	ldr	r2, [pc, #504]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a1e:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a20:	e001      	b.n	8003a26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4979      	ldr	r1, [pc, #484]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a2e:	428b      	cmp	r3, r1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a32:	4b79      	ldr	r3, [pc, #484]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a34:	e001      	b.n	8003a3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685a      	ldr	r2, [r3, #4]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a50:	2300      	movs	r3, #0
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	f043 0202 	orr.w	r2, r3, #2
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7ff fe34 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	f040 80be 	bne.w	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f000 80b8 	beq.w	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003aa6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ab2:	4b59      	ldr	r3, [pc, #356]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ab4:	e001      	b.n	8003aba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ab6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4954      	ldr	r1, [pc, #336]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003ac2:	428b      	cmp	r3, r1
 8003ac4:	d101      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ac6:	4b54      	ldr	r3, [pc, #336]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003ac8:	e001      	b.n	8003ace <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003aca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	60bb      	str	r3, [r7, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aee:	f043 0204 	orr.w	r2, r3, #4
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff fdf6 	bl	80036e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003afc:	e084      	b.n	8003c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d107      	bne.n	8003b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f8be 	bl	8003c94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d107      	bne.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f8fd 	bl	8003d2c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b40      	cmp	r3, #64	; 0x40
 8003b3a:	d12f      	bne.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02a      	beq.n	8003b9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2e      	ldr	r2, [pc, #184]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d101      	bne.n	8003b64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b60:	4b2d      	ldr	r3, [pc, #180]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b62:	e001      	b.n	8003b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4929      	ldr	r1, [pc, #164]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003b70:	428b      	cmp	r3, r1
 8003b72:	d101      	bne.n	8003b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003b76:	e001      	b.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fda6 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d131      	bne.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d02c      	beq.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a17      	ldr	r2, [pc, #92]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d101      	bne.n	8003bbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003bba:	4b17      	ldr	r3, [pc, #92]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bbc:	e001      	b.n	8003bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003bbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4912      	ldr	r1, [pc, #72]	; (8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003bca:	428b      	cmp	r3, r1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003bce:	4b12      	ldr	r3, [pc, #72]	; (8003c18 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003bd0:	e001      	b.n	8003bd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003bd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bd6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bda:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	685a      	ldr	r2, [r3, #4]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bea:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf8:	f043 0204 	orr.w	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7ff fd71 	bl	80036e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c06:	e000      	b.n	8003c0a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c08:	bf00      	nop
}
 8003c0a:	bf00      	nop
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40003800 	.word	0x40003800
 8003c18:	40003400 	.word	0x40003400

08003c1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	1c99      	adds	r1, r3, #2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6251      	str	r1, [r2, #36]	; 0x24
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d113      	bne.n	8003c8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ffc9 	bl	8003c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca0:	1c99      	adds	r1, r3, #2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ca6:	8819      	ldrh	r1, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <I2SEx_TxISR_I2SExt+0x90>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <I2SEx_TxISR_I2SExt+0x22>
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <I2SEx_TxISR_I2SExt+0x94>)
 8003cb4:	e001      	b.n	8003cba <I2SEx_TxISR_I2SExt+0x26>
 8003cb6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cba:	460a      	mov	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d121      	bne.n	8003d1a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <I2SEx_TxISR_I2SExt+0x90>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <I2SEx_TxISR_I2SExt+0x50>
 8003ce0:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <I2SEx_TxISR_I2SExt+0x94>)
 8003ce2:	e001      	b.n	8003ce8 <I2SEx_TxISR_I2SExt+0x54>
 8003ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	490d      	ldr	r1, [pc, #52]	; (8003d24 <I2SEx_TxISR_I2SExt+0x90>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d101      	bne.n	8003cf8 <I2SEx_TxISR_I2SExt+0x64>
 8003cf4:	4b0c      	ldr	r3, [pc, #48]	; (8003d28 <I2SEx_TxISR_I2SExt+0x94>)
 8003cf6:	e001      	b.n	8003cfc <I2SEx_TxISR_I2SExt+0x68>
 8003cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d00:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d106      	bne.n	8003d1a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ff81 	bl	8003c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40003800 	.word	0x40003800
 8003d28:	40003400 	.word	0x40003400

08003d2c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68d8      	ldr	r0, [r3, #12]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3e:	1c99      	adds	r1, r3, #2
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d44:	b282      	uxth	r2, r0
 8003d46:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d113      	bne.n	8003d88 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d6e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d106      	bne.n	8003d88 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff ff4a 	bl	8003c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a20      	ldr	r2, [pc, #128]	; (8003e20 <I2SEx_RxISR_I2SExt+0x90>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d101      	bne.n	8003da6 <I2SEx_RxISR_I2SExt+0x16>
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <I2SEx_RxISR_I2SExt+0x94>)
 8003da4:	e001      	b.n	8003daa <I2SEx_RxISR_I2SExt+0x1a>
 8003da6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003daa:	68d8      	ldr	r0, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	1c99      	adds	r1, r3, #2
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003db6:	b282      	uxth	r2, r0
 8003db8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d121      	bne.n	8003e16 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <I2SEx_RxISR_I2SExt+0x90>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <I2SEx_RxISR_I2SExt+0x50>
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <I2SEx_RxISR_I2SExt+0x94>)
 8003dde:	e001      	b.n	8003de4 <I2SEx_RxISR_I2SExt+0x54>
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	490d      	ldr	r1, [pc, #52]	; (8003e20 <I2SEx_RxISR_I2SExt+0x90>)
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d101      	bne.n	8003df4 <I2SEx_RxISR_I2SExt+0x64>
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <I2SEx_RxISR_I2SExt+0x94>)
 8003df2:	e001      	b.n	8003df8 <I2SEx_RxISR_I2SExt+0x68>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003dfc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff03 	bl	8003c1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40003800 	.word	0x40003800
 8003e24:	40003400 	.word	0x40003400

08003e28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e264      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d075      	beq.n	8003f32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e46:	4ba3      	ldr	r3, [pc, #652]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	f003 030c 	and.w	r3, r3, #12
 8003e4e:	2b04      	cmp	r3, #4
 8003e50:	d00c      	beq.n	8003e6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e52:	4ba0      	ldr	r3, [pc, #640]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003e5a:	2b08      	cmp	r3, #8
 8003e5c:	d112      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5e:	4b9d      	ldr	r3, [pc, #628]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e6a:	d10b      	bne.n	8003e84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6c:	4b99      	ldr	r3, [pc, #612]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d05b      	beq.n	8003f30 <HAL_RCC_OscConfig+0x108>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d157      	bne.n	8003f30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e23f      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e8c:	d106      	bne.n	8003e9c <HAL_RCC_OscConfig+0x74>
 8003e8e:	4b91      	ldr	r3, [pc, #580]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a90      	ldr	r2, [pc, #576]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6013      	str	r3, [r2, #0]
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea4:	d10c      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x98>
 8003ea6:	4b8b      	ldr	r3, [pc, #556]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a8a      	ldr	r2, [pc, #552]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003eac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	4b88      	ldr	r3, [pc, #544]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003eb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e00b      	b.n	8003ed8 <HAL_RCC_OscConfig+0xb0>
 8003ec0:	4b84      	ldr	r3, [pc, #528]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a83      	ldr	r2, [pc, #524]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ec6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eca:	6013      	str	r3, [r2, #0]
 8003ecc:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a80      	ldr	r2, [pc, #512]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ed2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ed6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d013      	beq.n	8003f08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fac2 	bl	8001468 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ee8:	f7fd fabe 	bl	8001468 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b64      	cmp	r3, #100	; 0x64
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e204      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efa:	4b76      	ldr	r3, [pc, #472]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0f0      	beq.n	8003ee8 <HAL_RCC_OscConfig+0xc0>
 8003f06:	e014      	b.n	8003f32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f08:	f7fd faae 	bl	8001468 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f0e:	e008      	b.n	8003f22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f10:	f7fd faaa 	bl	8001468 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	2b64      	cmp	r3, #100	; 0x64
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e1f0      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f22:	4b6c      	ldr	r3, [pc, #432]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f0      	bne.n	8003f10 <HAL_RCC_OscConfig+0xe8>
 8003f2e:	e000      	b.n	8003f32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d063      	beq.n	8004006 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f3e:	4b65      	ldr	r3, [pc, #404]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f003 030c 	and.w	r3, r3, #12
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00b      	beq.n	8003f62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f4a:	4b62      	ldr	r3, [pc, #392]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f52:	2b08      	cmp	r3, #8
 8003f54:	d11c      	bne.n	8003f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f56:	4b5f      	ldr	r3, [pc, #380]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d116      	bne.n	8003f90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f62:	4b5c      	ldr	r3, [pc, #368]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x152>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d001      	beq.n	8003f7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e1c4      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7a:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	00db      	lsls	r3, r3, #3
 8003f88:	4952      	ldr	r1, [pc, #328]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f8e:	e03a      	b.n	8004006 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d020      	beq.n	8003fda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f98:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <HAL_RCC_OscConfig+0x2b0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9e:	f7fd fa63 	bl	8001468 <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fa6:	f7fd fa5f 	bl	8001468 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1a5      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fb8:	4b46      	ldr	r3, [pc, #280]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc4:	4b43      	ldr	r3, [pc, #268]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4940      	ldr	r1, [pc, #256]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	600b      	str	r3, [r1, #0]
 8003fd8:	e015      	b.n	8004006 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fda:	4b3f      	ldr	r3, [pc, #252]	; (80040d8 <HAL_RCC_OscConfig+0x2b0>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fa42 	bl	8001468 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fa3e 	bl	8001468 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e184      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffa:	4b36      	ldr	r3, [pc, #216]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0308 	and.w	r3, r3, #8
 800400e:	2b00      	cmp	r3, #0
 8004010:	d030      	beq.n	8004074 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d016      	beq.n	8004048 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401a:	4b30      	ldr	r3, [pc, #192]	; (80040dc <HAL_RCC_OscConfig+0x2b4>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004020:	f7fd fa22 	bl	8001468 <HAL_GetTick>
 8004024:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004026:	e008      	b.n	800403a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004028:	f7fd fa1e 	bl	8001468 <HAL_GetTick>
 800402c:	4602      	mov	r2, r0
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	2b02      	cmp	r3, #2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e164      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403a:	4b26      	ldr	r3, [pc, #152]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 800403c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0f0      	beq.n	8004028 <HAL_RCC_OscConfig+0x200>
 8004046:	e015      	b.n	8004074 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004048:	4b24      	ldr	r3, [pc, #144]	; (80040dc <HAL_RCC_OscConfig+0x2b4>)
 800404a:	2200      	movs	r2, #0
 800404c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404e:	f7fd fa0b 	bl	8001468 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004056:	f7fd fa07 	bl	8001468 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e14d      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 800406a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f0      	bne.n	8004056 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 80a0 	beq.w	80041c2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10f      	bne.n	80040b2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	2300      	movs	r3, #0
 8004094:	60bb      	str	r3, [r7, #8]
 8004096:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	4a0e      	ldr	r2, [pc, #56]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a0:	6413      	str	r3, [r2, #64]	; 0x40
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040aa:	60bb      	str	r3, [r7, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ae:	2301      	movs	r3, #1
 80040b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_RCC_OscConfig+0x2b8>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d121      	bne.n	8004102 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040be:	4b08      	ldr	r3, [pc, #32]	; (80040e0 <HAL_RCC_OscConfig+0x2b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a07      	ldr	r2, [pc, #28]	; (80040e0 <HAL_RCC_OscConfig+0x2b8>)
 80040c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ca:	f7fd f9cd 	bl	8001468 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d0:	e011      	b.n	80040f6 <HAL_RCC_OscConfig+0x2ce>
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800
 80040d8:	42470000 	.word	0x42470000
 80040dc:	42470e80 	.word	0x42470e80
 80040e0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e4:	f7fd f9c0 	bl	8001468 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e106      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f6:	4b85      	ldr	r3, [pc, #532]	; (800430c <HAL_RCC_OscConfig+0x4e4>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x2f0>
 800410a:	4b81      	ldr	r3, [pc, #516]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	4a80      	ldr	r2, [pc, #512]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	; 0x70
 8004116:	e01c      	b.n	8004152 <HAL_RCC_OscConfig+0x32a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b05      	cmp	r3, #5
 800411e:	d10c      	bne.n	800413a <HAL_RCC_OscConfig+0x312>
 8004120:	4b7b      	ldr	r3, [pc, #492]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	4a7a      	ldr	r2, [pc, #488]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6713      	str	r3, [r2, #112]	; 0x70
 800412c:	4b78      	ldr	r3, [pc, #480]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 800412e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004130:	4a77      	ldr	r2, [pc, #476]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004132:	f043 0301 	orr.w	r3, r3, #1
 8004136:	6713      	str	r3, [r2, #112]	; 0x70
 8004138:	e00b      	b.n	8004152 <HAL_RCC_OscConfig+0x32a>
 800413a:	4b75      	ldr	r3, [pc, #468]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413e:	4a74      	ldr	r2, [pc, #464]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004140:	f023 0301 	bic.w	r3, r3, #1
 8004144:	6713      	str	r3, [r2, #112]	; 0x70
 8004146:	4b72      	ldr	r3, [pc, #456]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414a:	4a71      	ldr	r2, [pc, #452]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 800414c:	f023 0304 	bic.w	r3, r3, #4
 8004150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d015      	beq.n	8004186 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415a:	f7fd f985 	bl	8001468 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004160:	e00a      	b.n	8004178 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004162:	f7fd f981 	bl	8001468 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004170:	4293      	cmp	r3, r2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0c5      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004178:	4b65      	ldr	r3, [pc, #404]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 800417a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d0ee      	beq.n	8004162 <HAL_RCC_OscConfig+0x33a>
 8004184:	e014      	b.n	80041b0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004186:	f7fd f96f 	bl	8001468 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418e:	f7fd f96b 	bl	8001468 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	f241 3288 	movw	r2, #5000	; 0x1388
 800419c:	4293      	cmp	r3, r2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e0af      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a4:	4b5a      	ldr	r3, [pc, #360]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1ee      	bne.n	800418e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041b0:	7dfb      	ldrb	r3, [r7, #23]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d105      	bne.n	80041c2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041b6:	4b56      	ldr	r3, [pc, #344]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	4a55      	ldr	r2, [pc, #340]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 80041bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 809b 	beq.w	8004302 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041cc:	4b50      	ldr	r3, [pc, #320]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 030c 	and.w	r3, r3, #12
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d05c      	beq.n	8004292 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	699b      	ldr	r3, [r3, #24]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d141      	bne.n	8004264 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b4c      	ldr	r3, [pc, #304]	; (8004314 <HAL_RCC_OscConfig+0x4ec>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fd f93f 	bl	8001468 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd f93b 	bl	8001468 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e081      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	4b43      	ldr	r3, [pc, #268]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	431a      	orrs	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	019b      	lsls	r3, r3, #6
 800421c:	431a      	orrs	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004222:	085b      	lsrs	r3, r3, #1
 8004224:	3b01      	subs	r3, #1
 8004226:	041b      	lsls	r3, r3, #16
 8004228:	431a      	orrs	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422e:	061b      	lsls	r3, r3, #24
 8004230:	4937      	ldr	r1, [pc, #220]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <HAL_RCC_OscConfig+0x4ec>)
 8004238:	2201      	movs	r2, #1
 800423a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800423c:	f7fd f914 	bl	8001468 <HAL_GetTick>
 8004240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004242:	e008      	b.n	8004256 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004244:	f7fd f910 	bl	8001468 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	2b02      	cmp	r3, #2
 8004250:	d901      	bls.n	8004256 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e056      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004256:	4b2e      	ldr	r3, [pc, #184]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d0f0      	beq.n	8004244 <HAL_RCC_OscConfig+0x41c>
 8004262:	e04e      	b.n	8004302 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004264:	4b2b      	ldr	r3, [pc, #172]	; (8004314 <HAL_RCC_OscConfig+0x4ec>)
 8004266:	2200      	movs	r2, #0
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fd f8fd 	bl	8001468 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004272:	f7fd f8f9 	bl	8001468 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e03f      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004284:	4b22      	ldr	r3, [pc, #136]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1f0      	bne.n	8004272 <HAL_RCC_OscConfig+0x44a>
 8004290:	e037      	b.n	8004302 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e032      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_RCC_OscConfig+0x4e8>)
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d028      	beq.n	80042fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d121      	bne.n	80042fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d11a      	bne.n	80042fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042ce:	4013      	ands	r3, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042d4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d111      	bne.n	80042fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e4:	085b      	lsrs	r3, r3, #1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d107      	bne.n	80042fe <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d001      	beq.n	8004302 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40007000 	.word	0x40007000
 8004310:	40023800 	.word	0x40023800
 8004314:	42470060 	.word	0x42470060

08004318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d101      	bne.n	800432c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0cc      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800432c:	4b68      	ldr	r3, [pc, #416]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d90c      	bls.n	8004354 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b65      	ldr	r3, [pc, #404]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b63      	ldr	r3, [pc, #396]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e0b8      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0304 	and.w	r3, r3, #4
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800436c:	4b59      	ldr	r3, [pc, #356]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a58      	ldr	r2, [pc, #352]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004372:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004376:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0308 	and.w	r3, r3, #8
 8004380:	2b00      	cmp	r3, #0
 8004382:	d005      	beq.n	8004390 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004384:	4b53      	ldr	r3, [pc, #332]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	4a52      	ldr	r2, [pc, #328]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800438a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800438e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004390:	4b50      	ldr	r3, [pc, #320]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	494d      	ldr	r1, [pc, #308]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d044      	beq.n	8004438 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b6:	4b47      	ldr	r3, [pc, #284]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d119      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e07f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d003      	beq.n	80043d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d107      	bne.n	80043e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b3f      	ldr	r3, [pc, #252]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e06f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0302 	and.w	r3, r3, #2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e067      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043f6:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f023 0203 	bic.w	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	4934      	ldr	r1, [pc, #208]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	4313      	orrs	r3, r2
 8004406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004408:	f7fd f82e 	bl	8001468 <HAL_GetTick>
 800440c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440e:	e00a      	b.n	8004426 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004410:	f7fd f82a 	bl	8001468 <HAL_GetTick>
 8004414:	4602      	mov	r2, r0
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	f241 3288 	movw	r2, #5000	; 0x1388
 800441e:	4293      	cmp	r3, r2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e04f      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004426:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 020c 	and.w	r2, r3, #12
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	429a      	cmp	r2, r3
 8004436:	d1eb      	bne.n	8004410 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d20c      	bcs.n	8004460 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b20      	ldr	r3, [pc, #128]	; (80044d0 <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e032      	b.n	80044c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d008      	beq.n	800447e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446c:	4b19      	ldr	r3, [pc, #100]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4916      	ldr	r1, [pc, #88]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	4313      	orrs	r3, r2
 800447c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800448a:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	00db      	lsls	r3, r3, #3
 8004498:	490e      	ldr	r1, [pc, #56]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800449e:	f000 f821 	bl	80044e4 <HAL_RCC_GetSysClockFreq>
 80044a2:	4602      	mov	r2, r0
 80044a4:	4b0b      	ldr	r3, [pc, #44]	; (80044d4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	091b      	lsrs	r3, r3, #4
 80044aa:	f003 030f 	and.w	r3, r3, #15
 80044ae:	490a      	ldr	r1, [pc, #40]	; (80044d8 <HAL_RCC_ClockConfig+0x1c0>)
 80044b0:	5ccb      	ldrb	r3, [r1, r3]
 80044b2:	fa22 f303 	lsr.w	r3, r2, r3
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80044ba:	4b09      	ldr	r3, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1c8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fc ff8e 	bl	80013e0 <HAL_InitTick>

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40023c00 	.word	0x40023c00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	080054b0 	.word	0x080054b0
 80044dc:	20000000 	.word	0x20000000
 80044e0:	20000004 	.word	0x20000004

080044e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	2300      	movs	r3, #0
 80044f6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044fc:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b08      	cmp	r3, #8
 8004506:	d00d      	beq.n	8004524 <HAL_RCC_GetSysClockFreq+0x40>
 8004508:	2b08      	cmp	r3, #8
 800450a:	f200 80bd 	bhi.w	8004688 <HAL_RCC_GetSysClockFreq+0x1a4>
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_RCC_GetSysClockFreq+0x34>
 8004512:	2b04      	cmp	r3, #4
 8004514:	d003      	beq.n	800451e <HAL_RCC_GetSysClockFreq+0x3a>
 8004516:	e0b7      	b.n	8004688 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b61      	ldr	r3, [pc, #388]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800451a:	60bb      	str	r3, [r7, #8]
       break;
 800451c:	e0b7      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800451e:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004520:	60bb      	str	r3, [r7, #8]
      break;
 8004522:	e0b4      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004524:	4b5d      	ldr	r3, [pc, #372]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800452e:	4b5b      	ldr	r3, [pc, #364]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d04d      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800453a:	4b58      	ldr	r3, [pc, #352]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	099b      	lsrs	r3, r3, #6
 8004540:	461a      	mov	r2, r3
 8004542:	f04f 0300 	mov.w	r3, #0
 8004546:	f240 10ff 	movw	r0, #511	; 0x1ff
 800454a:	f04f 0100 	mov.w	r1, #0
 800454e:	ea02 0800 	and.w	r8, r2, r0
 8004552:	ea03 0901 	and.w	r9, r3, r1
 8004556:	4640      	mov	r0, r8
 8004558:	4649      	mov	r1, r9
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	f04f 0300 	mov.w	r3, #0
 8004562:	014b      	lsls	r3, r1, #5
 8004564:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004568:	0142      	lsls	r2, r0, #5
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	ebb0 0008 	subs.w	r0, r0, r8
 8004572:	eb61 0109 	sbc.w	r1, r1, r9
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	018b      	lsls	r3, r1, #6
 8004580:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004584:	0182      	lsls	r2, r0, #6
 8004586:	1a12      	subs	r2, r2, r0
 8004588:	eb63 0301 	sbc.w	r3, r3, r1
 800458c:	f04f 0000 	mov.w	r0, #0
 8004590:	f04f 0100 	mov.w	r1, #0
 8004594:	00d9      	lsls	r1, r3, #3
 8004596:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800459a:	00d0      	lsls	r0, r2, #3
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	eb12 0208 	adds.w	r2, r2, r8
 80045a4:	eb43 0309 	adc.w	r3, r3, r9
 80045a8:	f04f 0000 	mov.w	r0, #0
 80045ac:	f04f 0100 	mov.w	r1, #0
 80045b0:	0259      	lsls	r1, r3, #9
 80045b2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80045b6:	0250      	lsls	r0, r2, #9
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	461a      	mov	r2, r3
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	f7fb fdfe 	bl	80001c8 <__aeabi_uldivmod>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	4613      	mov	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e04a      	b.n	800466c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045d6:	4b31      	ldr	r3, [pc, #196]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	099b      	lsrs	r3, r3, #6
 80045dc:	461a      	mov	r2, r3
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045e6:	f04f 0100 	mov.w	r1, #0
 80045ea:	ea02 0400 	and.w	r4, r2, r0
 80045ee:	ea03 0501 	and.w	r5, r3, r1
 80045f2:	4620      	mov	r0, r4
 80045f4:	4629      	mov	r1, r5
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	014b      	lsls	r3, r1, #5
 8004600:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004604:	0142      	lsls	r2, r0, #5
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	1b00      	subs	r0, r0, r4
 800460c:	eb61 0105 	sbc.w	r1, r1, r5
 8004610:	f04f 0200 	mov.w	r2, #0
 8004614:	f04f 0300 	mov.w	r3, #0
 8004618:	018b      	lsls	r3, r1, #6
 800461a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800461e:	0182      	lsls	r2, r0, #6
 8004620:	1a12      	subs	r2, r2, r0
 8004622:	eb63 0301 	sbc.w	r3, r3, r1
 8004626:	f04f 0000 	mov.w	r0, #0
 800462a:	f04f 0100 	mov.w	r1, #0
 800462e:	00d9      	lsls	r1, r3, #3
 8004630:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004634:	00d0      	lsls	r0, r2, #3
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	1912      	adds	r2, r2, r4
 800463c:	eb45 0303 	adc.w	r3, r5, r3
 8004640:	f04f 0000 	mov.w	r0, #0
 8004644:	f04f 0100 	mov.w	r1, #0
 8004648:	0299      	lsls	r1, r3, #10
 800464a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800464e:	0290      	lsls	r0, r2, #10
 8004650:	4602      	mov	r2, r0
 8004652:	460b      	mov	r3, r1
 8004654:	4610      	mov	r0, r2
 8004656:	4619      	mov	r1, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	461a      	mov	r2, r3
 800465c:	f04f 0300 	mov.w	r3, #0
 8004660:	f7fb fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	4613      	mov	r3, r2
 800466a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	3301      	adds	r3, #1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	fbb2 f3f3 	udiv	r3, r2, r3
 8004684:	60bb      	str	r3, [r7, #8]
      break;
 8004686:	e002      	b.n	800468e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800468a:	60bb      	str	r3, [r7, #8]
      break;
 800468c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800468e:	68bb      	ldr	r3, [r7, #8]
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800469a:	bf00      	nop
 800469c:	40023800 	.word	0x40023800
 80046a0:	00f42400 	.word	0x00f42400
 80046a4:	007a1200 	.word	0x007a1200

080046a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046ac:	4b03      	ldr	r3, [pc, #12]	; (80046bc <HAL_RCC_GetHCLKFreq+0x14>)
 80046ae:	681b      	ldr	r3, [r3, #0]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	20000000 	.word	0x20000000

080046c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046c4:	f7ff fff0 	bl	80046a8 <HAL_RCC_GetHCLKFreq>
 80046c8:	4602      	mov	r2, r0
 80046ca:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	0a9b      	lsrs	r3, r3, #10
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	4903      	ldr	r1, [pc, #12]	; (80046e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046d6:	5ccb      	ldrb	r3, [r1, r3]
 80046d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046dc:	4618      	mov	r0, r3
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40023800 	.word	0x40023800
 80046e4:	080054c0 	.word	0x080054c0

080046e8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0301 	and.w	r3, r3, #1
 8004700:	2b00      	cmp	r3, #0
 8004702:	d105      	bne.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800470c:	2b00      	cmp	r3, #0
 800470e:	d035      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004710:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004716:	f7fc fea7 	bl	8001468 <HAL_GetTick>
 800471a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800471c:	e008      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800471e:	f7fc fea3 	bl	8001468 <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d901      	bls.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e0b0      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004730:	4b5b      	ldr	r3, [pc, #364]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f0      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	019a      	lsls	r2, r3, #6
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	071b      	lsls	r3, r3, #28
 8004748:	4955      	ldr	r1, [pc, #340]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800474a:	4313      	orrs	r3, r2
 800474c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004750:	4b52      	ldr	r3, [pc, #328]	; (800489c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004756:	f7fc fe87 	bl	8001468 <HAL_GetTick>
 800475a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800475e:	f7fc fe83 	bl	8001468 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e090      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004770:	4b4b      	ldr	r3, [pc, #300]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0f0      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	f000 8083 	beq.w	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	4b44      	ldr	r3, [pc, #272]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004792:	4a43      	ldr	r2, [pc, #268]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	4b41      	ldr	r3, [pc, #260]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a2:	60fb      	str	r3, [r7, #12]
 80047a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047a6:	4b3f      	ldr	r3, [pc, #252]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a3e      	ldr	r2, [pc, #248]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047b2:	f7fc fe59 	bl	8001468 <HAL_GetTick>
 80047b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047b8:	e008      	b.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fc fe55 	bl	8001468 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e062      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047d8:	4b31      	ldr	r3, [pc, #196]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d02f      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d028      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047f6:	4b2a      	ldr	r3, [pc, #168]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004800:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004802:	2201      	movs	r2, #1
 8004804:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004806:	4b28      	ldr	r3, [pc, #160]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800480c:	4a24      	ldr	r2, [pc, #144]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004812:	4b23      	ldr	r3, [pc, #140]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004816:	f003 0301 	and.w	r3, r3, #1
 800481a:	2b01      	cmp	r3, #1
 800481c:	d114      	bne.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800481e:	f7fc fe23 	bl	8001468 <HAL_GetTick>
 8004822:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004824:	e00a      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004826:	f7fc fe1f 	bl	8001468 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	f241 3288 	movw	r2, #5000	; 0x1388
 8004834:	4293      	cmp	r3, r2
 8004836:	d901      	bls.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004838:	2303      	movs	r3, #3
 800483a:	e02a      	b.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483c:	4b18      	ldr	r3, [pc, #96]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d0ee      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004854:	d10d      	bne.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004856:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004866:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486a:	490d      	ldr	r1, [pc, #52]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	608b      	str	r3, [r1, #8]
 8004870:	e005      	b.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004872:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004878:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800487c:	6093      	str	r3, [r2, #8]
 800487e:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800488a:	4905      	ldr	r1, [pc, #20]	; (80048a0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	42470068 	.word	0x42470068
 80048a0:	40023800 	.word	0x40023800
 80048a4:	40007000 	.word	0x40007000
 80048a8:	42470e40 	.word	0x42470e40

080048ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b087      	sub	sp, #28
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d13e      	bne.n	8004948 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048ca:	4b23      	ldr	r3, [pc, #140]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d12f      	bne.n	8004940 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048e0:	4b1e      	ldr	r3, [pc, #120]	; (800495c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048e2:	617b      	str	r3, [r7, #20]
          break;
 80048e4:	e02f      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048e6:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f2:	d108      	bne.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048fc:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004902:	613b      	str	r3, [r7, #16]
 8004904:	e007      	b.n	8004916 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004906:	4b14      	ldr	r3, [pc, #80]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490e:	4a15      	ldr	r2, [pc, #84]	; (8004964 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004910:	fbb2 f3f3 	udiv	r3, r2, r3
 8004914:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	099b      	lsrs	r3, r3, #6
 800491e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	fb02 f303 	mul.w	r3, r2, r3
 8004928:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800492a:	4b0b      	ldr	r3, [pc, #44]	; (8004958 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800492c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004930:	0f1b      	lsrs	r3, r3, #28
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]
          break;
 800493e:	e002      	b.n	8004946 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]
          break;
 8004944:	bf00      	nop
        }
      }
      break;
 8004946:	bf00      	nop
    }
  }
  return frequency;
 8004948:	697b      	ldr	r3, [r7, #20]
}
 800494a:	4618      	mov	r0, r3
 800494c:	371c      	adds	r7, #28
 800494e:	46bd      	mov	sp, r7
 8004950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800
 800495c:	00bb8000 	.word	0x00bb8000
 8004960:	007a1200 	.word	0x007a1200
 8004964:	00f42400 	.word	0x00f42400

08004968 <__libc_init_array>:
 8004968:	b570      	push	{r4, r5, r6, lr}
 800496a:	4d0d      	ldr	r5, [pc, #52]	; (80049a0 <__libc_init_array+0x38>)
 800496c:	4c0d      	ldr	r4, [pc, #52]	; (80049a4 <__libc_init_array+0x3c>)
 800496e:	1b64      	subs	r4, r4, r5
 8004970:	10a4      	asrs	r4, r4, #2
 8004972:	2600      	movs	r6, #0
 8004974:	42a6      	cmp	r6, r4
 8004976:	d109      	bne.n	800498c <__libc_init_array+0x24>
 8004978:	4d0b      	ldr	r5, [pc, #44]	; (80049a8 <__libc_init_array+0x40>)
 800497a:	4c0c      	ldr	r4, [pc, #48]	; (80049ac <__libc_init_array+0x44>)
 800497c:	f000 fd8c 	bl	8005498 <_init>
 8004980:	1b64      	subs	r4, r4, r5
 8004982:	10a4      	asrs	r4, r4, #2
 8004984:	2600      	movs	r6, #0
 8004986:	42a6      	cmp	r6, r4
 8004988:	d105      	bne.n	8004996 <__libc_init_array+0x2e>
 800498a:	bd70      	pop	{r4, r5, r6, pc}
 800498c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004990:	4798      	blx	r3
 8004992:	3601      	adds	r6, #1
 8004994:	e7ee      	b.n	8004974 <__libc_init_array+0xc>
 8004996:	f855 3b04 	ldr.w	r3, [r5], #4
 800499a:	4798      	blx	r3
 800499c:	3601      	adds	r6, #1
 800499e:	e7f2      	b.n	8004986 <__libc_init_array+0x1e>
 80049a0:	080058a8 	.word	0x080058a8
 80049a4:	080058a8 	.word	0x080058a8
 80049a8:	080058a8 	.word	0x080058a8
 80049ac:	080058ac 	.word	0x080058ac

080049b0 <memset>:
 80049b0:	4402      	add	r2, r0
 80049b2:	4603      	mov	r3, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d100      	bne.n	80049ba <memset+0xa>
 80049b8:	4770      	bx	lr
 80049ba:	f803 1b01 	strb.w	r1, [r3], #1
 80049be:	e7f9      	b.n	80049b4 <memset+0x4>

080049c0 <sinf>:
 80049c0:	ee10 3a10 	vmov	r3, s0
 80049c4:	b507      	push	{r0, r1, r2, lr}
 80049c6:	4a1d      	ldr	r2, [pc, #116]	; (8004a3c <sinf+0x7c>)
 80049c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80049cc:	4293      	cmp	r3, r2
 80049ce:	dc05      	bgt.n	80049dc <sinf+0x1c>
 80049d0:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8004a40 <sinf+0x80>
 80049d4:	2000      	movs	r0, #0
 80049d6:	f000 fc5b 	bl	8005290 <__kernel_sinf>
 80049da:	e004      	b.n	80049e6 <sinf+0x26>
 80049dc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80049e0:	db04      	blt.n	80049ec <sinf+0x2c>
 80049e2:	ee30 0a40 	vsub.f32	s0, s0, s0
 80049e6:	b003      	add	sp, #12
 80049e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ec:	4668      	mov	r0, sp
 80049ee:	f000 f829 	bl	8004a44 <__ieee754_rem_pio2f>
 80049f2:	f000 0003 	and.w	r0, r0, #3
 80049f6:	2801      	cmp	r0, #1
 80049f8:	d008      	beq.n	8004a0c <sinf+0x4c>
 80049fa:	2802      	cmp	r0, #2
 80049fc:	d00d      	beq.n	8004a1a <sinf+0x5a>
 80049fe:	b9b0      	cbnz	r0, 8004a2e <sinf+0x6e>
 8004a00:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a04:	ed9d 0a00 	vldr	s0, [sp]
 8004a08:	2001      	movs	r0, #1
 8004a0a:	e7e4      	b.n	80049d6 <sinf+0x16>
 8004a0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a10:	ed9d 0a00 	vldr	s0, [sp]
 8004a14:	f000 f952 	bl	8004cbc <__kernel_cosf>
 8004a18:	e7e5      	b.n	80049e6 <sinf+0x26>
 8004a1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a1e:	ed9d 0a00 	vldr	s0, [sp]
 8004a22:	2001      	movs	r0, #1
 8004a24:	f000 fc34 	bl	8005290 <__kernel_sinf>
 8004a28:	eeb1 0a40 	vneg.f32	s0, s0
 8004a2c:	e7db      	b.n	80049e6 <sinf+0x26>
 8004a2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8004a32:	ed9d 0a00 	vldr	s0, [sp]
 8004a36:	f000 f941 	bl	8004cbc <__kernel_cosf>
 8004a3a:	e7f5      	b.n	8004a28 <sinf+0x68>
 8004a3c:	3f490fd8 	.word	0x3f490fd8
 8004a40:	00000000 	.word	0x00000000

08004a44 <__ieee754_rem_pio2f>:
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a46:	ee10 6a10 	vmov	r6, s0
 8004a4a:	4b8e      	ldr	r3, [pc, #568]	; (8004c84 <__ieee754_rem_pio2f+0x240>)
 8004a4c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8004a50:	429d      	cmp	r5, r3
 8004a52:	b087      	sub	sp, #28
 8004a54:	eef0 7a40 	vmov.f32	s15, s0
 8004a58:	4604      	mov	r4, r0
 8004a5a:	dc05      	bgt.n	8004a68 <__ieee754_rem_pio2f+0x24>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	ed80 0a00 	vstr	s0, [r0]
 8004a62:	6043      	str	r3, [r0, #4]
 8004a64:	2000      	movs	r0, #0
 8004a66:	e01a      	b.n	8004a9e <__ieee754_rem_pio2f+0x5a>
 8004a68:	4b87      	ldr	r3, [pc, #540]	; (8004c88 <__ieee754_rem_pio2f+0x244>)
 8004a6a:	429d      	cmp	r5, r3
 8004a6c:	dc46      	bgt.n	8004afc <__ieee754_rem_pio2f+0xb8>
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8004c8c <__ieee754_rem_pio2f+0x248>
 8004a74:	4b86      	ldr	r3, [pc, #536]	; (8004c90 <__ieee754_rem_pio2f+0x24c>)
 8004a76:	f025 050f 	bic.w	r5, r5, #15
 8004a7a:	dd1f      	ble.n	8004abc <__ieee754_rem_pio2f+0x78>
 8004a7c:	429d      	cmp	r5, r3
 8004a7e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004a82:	d00e      	beq.n	8004aa2 <__ieee754_rem_pio2f+0x5e>
 8004a84:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004c94 <__ieee754_rem_pio2f+0x250>
 8004a88:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8004a8c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004a90:	ed80 0a00 	vstr	s0, [r0]
 8004a94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a98:	2001      	movs	r0, #1
 8004a9a:	edc4 7a01 	vstr	s15, [r4, #4]
 8004a9e:	b007      	add	sp, #28
 8004aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa2:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004c98 <__ieee754_rem_pio2f+0x254>
 8004aa6:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004c9c <__ieee754_rem_pio2f+0x258>
 8004aaa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004aae:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8004ab2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004ab6:	edc0 6a00 	vstr	s13, [r0]
 8004aba:	e7eb      	b.n	8004a94 <__ieee754_rem_pio2f+0x50>
 8004abc:	429d      	cmp	r5, r3
 8004abe:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004ac2:	d00e      	beq.n	8004ae2 <__ieee754_rem_pio2f+0x9e>
 8004ac4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8004c94 <__ieee754_rem_pio2f+0x250>
 8004ac8:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004acc:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004ad0:	ed80 0a00 	vstr	s0, [r0]
 8004ad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	edc4 7a01 	vstr	s15, [r4, #4]
 8004ae0:	e7dd      	b.n	8004a9e <__ieee754_rem_pio2f+0x5a>
 8004ae2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004c98 <__ieee754_rem_pio2f+0x254>
 8004ae6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c9c <__ieee754_rem_pio2f+0x258>
 8004aea:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004aee:	ee77 6a87 	vadd.f32	s13, s15, s14
 8004af2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004af6:	edc0 6a00 	vstr	s13, [r0]
 8004afa:	e7eb      	b.n	8004ad4 <__ieee754_rem_pio2f+0x90>
 8004afc:	4b68      	ldr	r3, [pc, #416]	; (8004ca0 <__ieee754_rem_pio2f+0x25c>)
 8004afe:	429d      	cmp	r5, r3
 8004b00:	dc72      	bgt.n	8004be8 <__ieee754_rem_pio2f+0x1a4>
 8004b02:	f000 fc0d 	bl	8005320 <fabsf>
 8004b06:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004ca4 <__ieee754_rem_pio2f+0x260>
 8004b0a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004b0e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004b12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1a:	ee17 0a90 	vmov	r0, s15
 8004b1e:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8004c8c <__ieee754_rem_pio2f+0x248>
 8004b22:	eea7 0a67 	vfms.f32	s0, s14, s15
 8004b26:	281f      	cmp	r0, #31
 8004b28:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8004c94 <__ieee754_rem_pio2f+0x250>
 8004b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b30:	eeb1 6a47 	vneg.f32	s12, s14
 8004b34:	ee70 6a67 	vsub.f32	s13, s0, s15
 8004b38:	ee16 2a90 	vmov	r2, s13
 8004b3c:	dc1c      	bgt.n	8004b78 <__ieee754_rem_pio2f+0x134>
 8004b3e:	495a      	ldr	r1, [pc, #360]	; (8004ca8 <__ieee754_rem_pio2f+0x264>)
 8004b40:	1e47      	subs	r7, r0, #1
 8004b42:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8004b46:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8004b4a:	428b      	cmp	r3, r1
 8004b4c:	d014      	beq.n	8004b78 <__ieee754_rem_pio2f+0x134>
 8004b4e:	6022      	str	r2, [r4, #0]
 8004b50:	ed94 7a00 	vldr	s14, [r4]
 8004b54:	ee30 0a47 	vsub.f32	s0, s0, s14
 8004b58:	2e00      	cmp	r6, #0
 8004b5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b5e:	ed84 0a01 	vstr	s0, [r4, #4]
 8004b62:	da9c      	bge.n	8004a9e <__ieee754_rem_pio2f+0x5a>
 8004b64:	eeb1 7a47 	vneg.f32	s14, s14
 8004b68:	eeb1 0a40 	vneg.f32	s0, s0
 8004b6c:	ed84 7a00 	vstr	s14, [r4]
 8004b70:	ed84 0a01 	vstr	s0, [r4, #4]
 8004b74:	4240      	negs	r0, r0
 8004b76:	e792      	b.n	8004a9e <__ieee754_rem_pio2f+0x5a>
 8004b78:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004b7c:	15eb      	asrs	r3, r5, #23
 8004b7e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8004b82:	2d08      	cmp	r5, #8
 8004b84:	dde3      	ble.n	8004b4e <__ieee754_rem_pio2f+0x10a>
 8004b86:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004c98 <__ieee754_rem_pio2f+0x254>
 8004b8a:	eef0 6a40 	vmov.f32	s13, s0
 8004b8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8004b92:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004b96:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004b9a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004c9c <__ieee754_rem_pio2f+0x258>
 8004b9e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8004ba2:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8004ba6:	eef0 7a40 	vmov.f32	s15, s0
 8004baa:	ee15 2a90 	vmov	r2, s11
 8004bae:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004bb2:	1a5b      	subs	r3, r3, r1
 8004bb4:	2b19      	cmp	r3, #25
 8004bb6:	dc04      	bgt.n	8004bc2 <__ieee754_rem_pio2f+0x17e>
 8004bb8:	edc4 5a00 	vstr	s11, [r4]
 8004bbc:	eeb0 0a66 	vmov.f32	s0, s13
 8004bc0:	e7c6      	b.n	8004b50 <__ieee754_rem_pio2f+0x10c>
 8004bc2:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004cac <__ieee754_rem_pio2f+0x268>
 8004bc6:	eeb0 0a66 	vmov.f32	s0, s13
 8004bca:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004bce:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8004bd2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004cb0 <__ieee754_rem_pio2f+0x26c>
 8004bd6:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004bda:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004bde:	ee30 7a67 	vsub.f32	s14, s0, s15
 8004be2:	ed84 7a00 	vstr	s14, [r4]
 8004be6:	e7b3      	b.n	8004b50 <__ieee754_rem_pio2f+0x10c>
 8004be8:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004bec:	db06      	blt.n	8004bfc <__ieee754_rem_pio2f+0x1b8>
 8004bee:	ee70 7a40 	vsub.f32	s15, s0, s0
 8004bf2:	edc0 7a01 	vstr	s15, [r0, #4]
 8004bf6:	edc0 7a00 	vstr	s15, [r0]
 8004bfa:	e733      	b.n	8004a64 <__ieee754_rem_pio2f+0x20>
 8004bfc:	15ea      	asrs	r2, r5, #23
 8004bfe:	3a86      	subs	r2, #134	; 0x86
 8004c00:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8004c04:	ee07 3a90 	vmov	s15, r3
 8004c08:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004c0c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8004cb4 <__ieee754_rem_pio2f+0x270>
 8004c10:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c18:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004c1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c20:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004c24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004c2c:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3c:	edcd 7a05 	vstr	s15, [sp, #20]
 8004c40:	d11e      	bne.n	8004c80 <__ieee754_rem_pio2f+0x23c>
 8004c42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	bf14      	ite	ne
 8004c4c:	2302      	movne	r3, #2
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	4919      	ldr	r1, [pc, #100]	; (8004cb8 <__ieee754_rem_pio2f+0x274>)
 8004c52:	9101      	str	r1, [sp, #4]
 8004c54:	2102      	movs	r1, #2
 8004c56:	9100      	str	r1, [sp, #0]
 8004c58:	a803      	add	r0, sp, #12
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	f000 f88e 	bl	8004d7c <__kernel_rem_pio2f>
 8004c60:	2e00      	cmp	r6, #0
 8004c62:	f6bf af1c 	bge.w	8004a9e <__ieee754_rem_pio2f+0x5a>
 8004c66:	edd4 7a00 	vldr	s15, [r4]
 8004c6a:	eef1 7a67 	vneg.f32	s15, s15
 8004c6e:	edc4 7a00 	vstr	s15, [r4]
 8004c72:	edd4 7a01 	vldr	s15, [r4, #4]
 8004c76:	eef1 7a67 	vneg.f32	s15, s15
 8004c7a:	edc4 7a01 	vstr	s15, [r4, #4]
 8004c7e:	e779      	b.n	8004b74 <__ieee754_rem_pio2f+0x130>
 8004c80:	2303      	movs	r3, #3
 8004c82:	e7e5      	b.n	8004c50 <__ieee754_rem_pio2f+0x20c>
 8004c84:	3f490fd8 	.word	0x3f490fd8
 8004c88:	4016cbe3 	.word	0x4016cbe3
 8004c8c:	3fc90f80 	.word	0x3fc90f80
 8004c90:	3fc90fd0 	.word	0x3fc90fd0
 8004c94:	37354443 	.word	0x37354443
 8004c98:	37354400 	.word	0x37354400
 8004c9c:	2e85a308 	.word	0x2e85a308
 8004ca0:	43490f80 	.word	0x43490f80
 8004ca4:	3f22f984 	.word	0x3f22f984
 8004ca8:	080054d0 	.word	0x080054d0
 8004cac:	2e85a300 	.word	0x2e85a300
 8004cb0:	248d3132 	.word	0x248d3132
 8004cb4:	43800000 	.word	0x43800000
 8004cb8:	08005550 	.word	0x08005550

08004cbc <__kernel_cosf>:
 8004cbc:	ee10 3a10 	vmov	r3, s0
 8004cc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cc4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004cc8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004ccc:	da05      	bge.n	8004cda <__kernel_cosf+0x1e>
 8004cce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004cd2:	ee17 2a90 	vmov	r2, s15
 8004cd6:	2a00      	cmp	r2, #0
 8004cd8:	d03d      	beq.n	8004d56 <__kernel_cosf+0x9a>
 8004cda:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004cde:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004d5c <__kernel_cosf+0xa0>
 8004ce2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8004d60 <__kernel_cosf+0xa4>
 8004ce6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8004d64 <__kernel_cosf+0xa8>
 8004cea:	4a1f      	ldr	r2, [pc, #124]	; (8004d68 <__kernel_cosf+0xac>)
 8004cec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004d6c <__kernel_cosf+0xb0>
 8004cf6:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004cfa:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004d70 <__kernel_cosf+0xb4>
 8004cfe:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004d02:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004d74 <__kernel_cosf+0xb8>
 8004d06:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004d0a:	eeb0 7a66 	vmov.f32	s14, s13
 8004d0e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004d12:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8004d16:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004d1a:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004d1e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8004d22:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8004d26:	dc04      	bgt.n	8004d32 <__kernel_cosf+0x76>
 8004d28:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004d2c:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004d30:	4770      	bx	lr
 8004d32:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <__kernel_cosf+0xbc>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfda      	itte	le
 8004d38:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8004d3c:	ee06 3a90 	vmovle	s13, r3
 8004d40:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8004d44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004d48:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004d4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004d54:	4770      	bx	lr
 8004d56:	eeb0 0a46 	vmov.f32	s0, s12
 8004d5a:	4770      	bx	lr
 8004d5c:	ad47d74e 	.word	0xad47d74e
 8004d60:	310f74f6 	.word	0x310f74f6
 8004d64:	3d2aaaab 	.word	0x3d2aaaab
 8004d68:	3e999999 	.word	0x3e999999
 8004d6c:	b493f27c 	.word	0xb493f27c
 8004d70:	37d00d01 	.word	0x37d00d01
 8004d74:	bab60b61 	.word	0xbab60b61
 8004d78:	3f480000 	.word	0x3f480000

08004d7c <__kernel_rem_pio2f>:
 8004d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d80:	ed2d 8b04 	vpush	{d8-d9}
 8004d84:	b0d7      	sub	sp, #348	; 0x15c
 8004d86:	4616      	mov	r6, r2
 8004d88:	4698      	mov	r8, r3
 8004d8a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8004d8c:	4bbb      	ldr	r3, [pc, #748]	; (800507c <__kernel_rem_pio2f+0x300>)
 8004d8e:	9001      	str	r0, [sp, #4]
 8004d90:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8004d94:	1d33      	adds	r3, r6, #4
 8004d96:	460d      	mov	r5, r1
 8004d98:	f108 39ff 	add.w	r9, r8, #4294967295
 8004d9c:	db29      	blt.n	8004df2 <__kernel_rem_pio2f+0x76>
 8004d9e:	1ef1      	subs	r1, r6, #3
 8004da0:	bf48      	it	mi
 8004da2:	1d31      	addmi	r1, r6, #4
 8004da4:	10c9      	asrs	r1, r1, #3
 8004da6:	1c4c      	adds	r4, r1, #1
 8004da8:	00e3      	lsls	r3, r4, #3
 8004daa:	9302      	str	r3, [sp, #8]
 8004dac:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004dae:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800508c <__kernel_rem_pio2f+0x310>
 8004db2:	eba1 0009 	sub.w	r0, r1, r9
 8004db6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8004dba:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8004dbe:	eb07 0c09 	add.w	ip, r7, r9
 8004dc2:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	4563      	cmp	r3, ip
 8004dca:	dd14      	ble.n	8004df6 <__kernel_rem_pio2f+0x7a>
 8004dcc:	ab1a      	add	r3, sp, #104	; 0x68
 8004dce:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 8004dd2:	46cc      	mov	ip, r9
 8004dd4:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8004dd8:	f1c8 0b01 	rsb	fp, r8, #1
 8004ddc:	eb0b 020c 	add.w	r2, fp, ip
 8004de0:	4297      	cmp	r7, r2
 8004de2:	db27      	blt.n	8004e34 <__kernel_rem_pio2f+0xb8>
 8004de4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004de8:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800508c <__kernel_rem_pio2f+0x310>
 8004dec:	4618      	mov	r0, r3
 8004dee:	2200      	movs	r2, #0
 8004df0:	e016      	b.n	8004e20 <__kernel_rem_pio2f+0xa4>
 8004df2:	2100      	movs	r1, #0
 8004df4:	e7d7      	b.n	8004da6 <__kernel_rem_pio2f+0x2a>
 8004df6:	42d8      	cmn	r0, r3
 8004df8:	bf5d      	ittte	pl
 8004dfa:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8004dfe:	ee07 2a90 	vmovpl	s15, r2
 8004e02:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8004e06:	eef0 7a47 	vmovmi.f32	s15, s14
 8004e0a:	ecea 7a01 	vstmia	sl!, {s15}
 8004e0e:	3301      	adds	r3, #1
 8004e10:	e7da      	b.n	8004dc8 <__kernel_rem_pio2f+0x4c>
 8004e12:	ecfe 6a01 	vldmia	lr!, {s13}
 8004e16:	ed90 7a00 	vldr	s14, [r0]
 8004e1a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004e1e:	3201      	adds	r2, #1
 8004e20:	454a      	cmp	r2, r9
 8004e22:	f1a0 0004 	sub.w	r0, r0, #4
 8004e26:	ddf4      	ble.n	8004e12 <__kernel_rem_pio2f+0x96>
 8004e28:	ecea 7a01 	vstmia	sl!, {s15}
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	f10c 0c01 	add.w	ip, ip, #1
 8004e32:	e7d3      	b.n	8004ddc <__kernel_rem_pio2f+0x60>
 8004e34:	ab06      	add	r3, sp, #24
 8004e36:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8004e3a:	9304      	str	r3, [sp, #16]
 8004e3c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8004e3e:	eddf 8a92 	vldr	s17, [pc, #584]	; 8005088 <__kernel_rem_pio2f+0x30c>
 8004e42:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8005084 <__kernel_rem_pio2f+0x308>
 8004e46:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8004e4a:	9303      	str	r3, [sp, #12]
 8004e4c:	46ba      	mov	sl, r7
 8004e4e:	ab56      	add	r3, sp, #344	; 0x158
 8004e50:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004e54:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8004e58:	ab06      	add	r3, sp, #24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	4652      	mov	r2, sl
 8004e5e:	2a00      	cmp	r2, #0
 8004e60:	dc51      	bgt.n	8004f06 <__kernel_rem_pio2f+0x18a>
 8004e62:	4620      	mov	r0, r4
 8004e64:	9305      	str	r3, [sp, #20]
 8004e66:	f000 faa5 	bl	80053b4 <scalbnf>
 8004e6a:	eeb0 8a40 	vmov.f32	s16, s0
 8004e6e:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8004e72:	ee28 0a00 	vmul.f32	s0, s16, s0
 8004e76:	f000 fa5b 	bl	8005330 <floorf>
 8004e7a:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8004e7e:	eea0 8a67 	vfms.f32	s16, s0, s15
 8004e82:	2c00      	cmp	r4, #0
 8004e84:	9b05      	ldr	r3, [sp, #20]
 8004e86:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8004e8a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004e8e:	edcd 7a00 	vstr	s15, [sp]
 8004e92:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004e96:	dd4b      	ble.n	8004f30 <__kernel_rem_pio2f+0x1b4>
 8004e98:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004e9c:	aa06      	add	r2, sp, #24
 8004e9e:	f1c4 0e08 	rsb	lr, r4, #8
 8004ea2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8004ea6:	ee17 1a90 	vmov	r1, s15
 8004eaa:	fa42 f00e 	asr.w	r0, r2, lr
 8004eae:	4401      	add	r1, r0
 8004eb0:	9100      	str	r1, [sp, #0]
 8004eb2:	fa00 f00e 	lsl.w	r0, r0, lr
 8004eb6:	a906      	add	r1, sp, #24
 8004eb8:	1a12      	subs	r2, r2, r0
 8004eba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8004ebe:	f1c4 0007 	rsb	r0, r4, #7
 8004ec2:	fa42 fb00 	asr.w	fp, r2, r0
 8004ec6:	f1bb 0f00 	cmp.w	fp, #0
 8004eca:	dd43      	ble.n	8004f54 <__kernel_rem_pio2f+0x1d8>
 8004ecc:	9a00      	ldr	r2, [sp, #0]
 8004ece:	f04f 0e00 	mov.w	lr, #0
 8004ed2:	3201      	adds	r2, #1
 8004ed4:	9200      	str	r2, [sp, #0]
 8004ed6:	4670      	mov	r0, lr
 8004ed8:	45f2      	cmp	sl, lr
 8004eda:	dc6c      	bgt.n	8004fb6 <__kernel_rem_pio2f+0x23a>
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	dd04      	ble.n	8004eea <__kernel_rem_pio2f+0x16e>
 8004ee0:	2c01      	cmp	r4, #1
 8004ee2:	d079      	beq.n	8004fd8 <__kernel_rem_pio2f+0x25c>
 8004ee4:	2c02      	cmp	r4, #2
 8004ee6:	f000 8082 	beq.w	8004fee <__kernel_rem_pio2f+0x272>
 8004eea:	f1bb 0f02 	cmp.w	fp, #2
 8004eee:	d131      	bne.n	8004f54 <__kernel_rem_pio2f+0x1d8>
 8004ef0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004ef4:	ee30 8a48 	vsub.f32	s16, s0, s16
 8004ef8:	b360      	cbz	r0, 8004f54 <__kernel_rem_pio2f+0x1d8>
 8004efa:	4620      	mov	r0, r4
 8004efc:	f000 fa5a 	bl	80053b4 <scalbnf>
 8004f00:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004f04:	e026      	b.n	8004f54 <__kernel_rem_pio2f+0x1d8>
 8004f06:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004f0a:	3a01      	subs	r2, #1
 8004f0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f10:	a942      	add	r1, sp, #264	; 0x108
 8004f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f16:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004f1a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004f1e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004f22:	eca0 0a01 	vstmia	r0!, {s0}
 8004f26:	ed9c 0a00 	vldr	s0, [ip]
 8004f2a:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004f2e:	e796      	b.n	8004e5e <__kernel_rem_pio2f+0xe2>
 8004f30:	d107      	bne.n	8004f42 <__kernel_rem_pio2f+0x1c6>
 8004f32:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004f36:	a906      	add	r1, sp, #24
 8004f38:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004f3c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 8004f40:	e7c1      	b.n	8004ec6 <__kernel_rem_pio2f+0x14a>
 8004f42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004f46:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4e:	da2f      	bge.n	8004fb0 <__kernel_rem_pio2f+0x234>
 8004f50:	f04f 0b00 	mov.w	fp, #0
 8004f54:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004f58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5c:	f040 8098 	bne.w	8005090 <__kernel_rem_pio2f+0x314>
 8004f60:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004f64:	469c      	mov	ip, r3
 8004f66:	2200      	movs	r2, #0
 8004f68:	45bc      	cmp	ip, r7
 8004f6a:	da48      	bge.n	8004ffe <__kernel_rem_pio2f+0x282>
 8004f6c:	2a00      	cmp	r2, #0
 8004f6e:	d05f      	beq.n	8005030 <__kernel_rem_pio2f+0x2b4>
 8004f70:	aa06      	add	r2, sp, #24
 8004f72:	3c08      	subs	r4, #8
 8004f74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004f78:	2900      	cmp	r1, #0
 8004f7a:	d07d      	beq.n	8005078 <__kernel_rem_pio2f+0x2fc>
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004f82:	9301      	str	r3, [sp, #4]
 8004f84:	f000 fa16 	bl	80053b4 <scalbnf>
 8004f88:	9b01      	ldr	r3, [sp, #4]
 8004f8a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005088 <__kernel_rem_pio2f+0x30c>
 8004f8e:	4619      	mov	r1, r3
 8004f90:	2900      	cmp	r1, #0
 8004f92:	f280 80af 	bge.w	80050f4 <__kernel_rem_pio2f+0x378>
 8004f96:	4618      	mov	r0, r3
 8004f98:	2400      	movs	r4, #0
 8004f9a:	2800      	cmp	r0, #0
 8004f9c:	f2c0 80d0 	blt.w	8005140 <__kernel_rem_pio2f+0x3c4>
 8004fa0:	a942      	add	r1, sp, #264	; 0x108
 8004fa2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8004fa6:	4a36      	ldr	r2, [pc, #216]	; (8005080 <__kernel_rem_pio2f+0x304>)
 8004fa8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800508c <__kernel_rem_pio2f+0x310>
 8004fac:	2100      	movs	r1, #0
 8004fae:	e0bb      	b.n	8005128 <__kernel_rem_pio2f+0x3ac>
 8004fb0:	f04f 0b02 	mov.w	fp, #2
 8004fb4:	e78a      	b.n	8004ecc <__kernel_rem_pio2f+0x150>
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	b948      	cbnz	r0, 8004fce <__kernel_rem_pio2f+0x252>
 8004fba:	b11a      	cbz	r2, 8004fc4 <__kernel_rem_pio2f+0x248>
 8004fbc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f10e 0e01 	add.w	lr, lr, #1
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4610      	mov	r0, r2
 8004fcc:	e784      	b.n	8004ed8 <__kernel_rem_pio2f+0x15c>
 8004fce:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	e7f5      	b.n	8004fc4 <__kernel_rem_pio2f+0x248>
 8004fd8:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004fdc:	ab06      	add	r3, sp, #24
 8004fde:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fe6:	aa06      	add	r2, sp, #24
 8004fe8:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8004fec:	e77d      	b.n	8004eea <__kernel_rem_pio2f+0x16e>
 8004fee:	f10a 3cff 	add.w	ip, sl, #4294967295
 8004ff2:	ab06      	add	r3, sp, #24
 8004ff4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffc:	e7f3      	b.n	8004fe6 <__kernel_rem_pio2f+0x26a>
 8004ffe:	a906      	add	r1, sp, #24
 8005000:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005004:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005008:	4302      	orrs	r2, r0
 800500a:	e7ad      	b.n	8004f68 <__kernel_rem_pio2f+0x1ec>
 800500c:	3001      	adds	r0, #1
 800500e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005012:	2a00      	cmp	r2, #0
 8005014:	d0fa      	beq.n	800500c <__kernel_rem_pio2f+0x290>
 8005016:	a91a      	add	r1, sp, #104	; 0x68
 8005018:	eb0a 0208 	add.w	r2, sl, r8
 800501c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005020:	f10a 0301 	add.w	r3, sl, #1
 8005024:	eb0a 0100 	add.w	r1, sl, r0
 8005028:	4299      	cmp	r1, r3
 800502a:	da04      	bge.n	8005036 <__kernel_rem_pio2f+0x2ba>
 800502c:	468a      	mov	sl, r1
 800502e:	e70e      	b.n	8004e4e <__kernel_rem_pio2f+0xd2>
 8005030:	9b04      	ldr	r3, [sp, #16]
 8005032:	2001      	movs	r0, #1
 8005034:	e7eb      	b.n	800500e <__kernel_rem_pio2f+0x292>
 8005036:	9803      	ldr	r0, [sp, #12]
 8005038:	f8dd c004 	ldr.w	ip, [sp, #4]
 800503c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005040:	9000      	str	r0, [sp, #0]
 8005042:	ee07 0a90 	vmov	s15, r0
 8005046:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800504a:	2000      	movs	r0, #0
 800504c:	ece2 7a01 	vstmia	r2!, {s15}
 8005050:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800508c <__kernel_rem_pio2f+0x310>
 8005054:	4696      	mov	lr, r2
 8005056:	4548      	cmp	r0, r9
 8005058:	dd06      	ble.n	8005068 <__kernel_rem_pio2f+0x2ec>
 800505a:	a842      	add	r0, sp, #264	; 0x108
 800505c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005060:	edc0 7a00 	vstr	s15, [r0]
 8005064:	3301      	adds	r3, #1
 8005066:	e7df      	b.n	8005028 <__kernel_rem_pio2f+0x2ac>
 8005068:	ecfc 6a01 	vldmia	ip!, {s13}
 800506c:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005070:	3001      	adds	r0, #1
 8005072:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005076:	e7ee      	b.n	8005056 <__kernel_rem_pio2f+0x2da>
 8005078:	3b01      	subs	r3, #1
 800507a:	e779      	b.n	8004f70 <__kernel_rem_pio2f+0x1f4>
 800507c:	08005894 	.word	0x08005894
 8005080:	08005868 	.word	0x08005868
 8005084:	43800000 	.word	0x43800000
 8005088:	3b800000 	.word	0x3b800000
 800508c:	00000000 	.word	0x00000000
 8005090:	9b02      	ldr	r3, [sp, #8]
 8005092:	eeb0 0a48 	vmov.f32	s0, s16
 8005096:	1b98      	subs	r0, r3, r6
 8005098:	f000 f98c 	bl	80053b4 <scalbnf>
 800509c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005084 <__kernel_rem_pio2f+0x308>
 80050a0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80050a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050a8:	db1b      	blt.n	80050e2 <__kernel_rem_pio2f+0x366>
 80050aa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005088 <__kernel_rem_pio2f+0x30c>
 80050ae:	ee60 7a27 	vmul.f32	s15, s0, s15
 80050b2:	aa06      	add	r2, sp, #24
 80050b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050b8:	a906      	add	r1, sp, #24
 80050ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050be:	3408      	adds	r4, #8
 80050c0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80050c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80050c8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80050cc:	ee10 3a10 	vmov	r3, s0
 80050d0:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80050d4:	ee17 2a90 	vmov	r2, s15
 80050d8:	f10a 0301 	add.w	r3, sl, #1
 80050dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80050e0:	e74c      	b.n	8004f7c <__kernel_rem_pio2f+0x200>
 80050e2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80050e6:	aa06      	add	r2, sp, #24
 80050e8:	ee10 3a10 	vmov	r3, s0
 80050ec:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80050f0:	4653      	mov	r3, sl
 80050f2:	e743      	b.n	8004f7c <__kernel_rem_pio2f+0x200>
 80050f4:	aa42      	add	r2, sp, #264	; 0x108
 80050f6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80050fa:	aa06      	add	r2, sp, #24
 80050fc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005100:	9201      	str	r2, [sp, #4]
 8005102:	ee07 2a90 	vmov	s15, r2
 8005106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800510a:	3901      	subs	r1, #1
 800510c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005110:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005114:	edc0 7a00 	vstr	s15, [r0]
 8005118:	e73a      	b.n	8004f90 <__kernel_rem_pio2f+0x214>
 800511a:	ecf2 6a01 	vldmia	r2!, {s13}
 800511e:	ecb6 7a01 	vldmia	r6!, {s14}
 8005122:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005126:	3101      	adds	r1, #1
 8005128:	42b9      	cmp	r1, r7
 800512a:	dc01      	bgt.n	8005130 <__kernel_rem_pio2f+0x3b4>
 800512c:	428c      	cmp	r4, r1
 800512e:	daf4      	bge.n	800511a <__kernel_rem_pio2f+0x39e>
 8005130:	aa56      	add	r2, sp, #344	; 0x158
 8005132:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005136:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800513a:	3801      	subs	r0, #1
 800513c:	3401      	adds	r4, #1
 800513e:	e72c      	b.n	8004f9a <__kernel_rem_pio2f+0x21e>
 8005140:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005142:	2a02      	cmp	r2, #2
 8005144:	dc0a      	bgt.n	800515c <__kernel_rem_pio2f+0x3e0>
 8005146:	2a00      	cmp	r2, #0
 8005148:	dc61      	bgt.n	800520e <__kernel_rem_pio2f+0x492>
 800514a:	d03c      	beq.n	80051c6 <__kernel_rem_pio2f+0x44a>
 800514c:	9b00      	ldr	r3, [sp, #0]
 800514e:	f003 0007 	and.w	r0, r3, #7
 8005152:	b057      	add	sp, #348	; 0x15c
 8005154:	ecbd 8b04 	vpop	{d8-d9}
 8005158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800515e:	2a03      	cmp	r2, #3
 8005160:	d1f4      	bne.n	800514c <__kernel_rem_pio2f+0x3d0>
 8005162:	aa2e      	add	r2, sp, #184	; 0xb8
 8005164:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005168:	4608      	mov	r0, r1
 800516a:	461c      	mov	r4, r3
 800516c:	2c00      	cmp	r4, #0
 800516e:	f1a0 0004 	sub.w	r0, r0, #4
 8005172:	dc59      	bgt.n	8005228 <__kernel_rem_pio2f+0x4ac>
 8005174:	4618      	mov	r0, r3
 8005176:	2801      	cmp	r0, #1
 8005178:	f1a1 0104 	sub.w	r1, r1, #4
 800517c:	dc64      	bgt.n	8005248 <__kernel_rem_pio2f+0x4cc>
 800517e:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 800508c <__kernel_rem_pio2f+0x310>
 8005182:	2b01      	cmp	r3, #1
 8005184:	dc70      	bgt.n	8005268 <__kernel_rem_pio2f+0x4ec>
 8005186:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800518a:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800518e:	f1bb 0f00 	cmp.w	fp, #0
 8005192:	d172      	bne.n	800527a <__kernel_rem_pio2f+0x4fe>
 8005194:	edc5 6a00 	vstr	s13, [r5]
 8005198:	ed85 7a01 	vstr	s14, [r5, #4]
 800519c:	edc5 7a02 	vstr	s15, [r5, #8]
 80051a0:	e7d4      	b.n	800514c <__kernel_rem_pio2f+0x3d0>
 80051a2:	aa2e      	add	r2, sp, #184	; 0xb8
 80051a4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80051a8:	ed91 7a00 	vldr	s14, [r1]
 80051ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80051b0:	3b01      	subs	r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	daf5      	bge.n	80051a2 <__kernel_rem_pio2f+0x426>
 80051b6:	f1bb 0f00 	cmp.w	fp, #0
 80051ba:	d001      	beq.n	80051c0 <__kernel_rem_pio2f+0x444>
 80051bc:	eef1 7a67 	vneg.f32	s15, s15
 80051c0:	edc5 7a00 	vstr	s15, [r5]
 80051c4:	e7c2      	b.n	800514c <__kernel_rem_pio2f+0x3d0>
 80051c6:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800508c <__kernel_rem_pio2f+0x310>
 80051ca:	e7f2      	b.n	80051b2 <__kernel_rem_pio2f+0x436>
 80051cc:	aa2e      	add	r2, sp, #184	; 0xb8
 80051ce:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80051d2:	edd0 7a00 	vldr	s15, [r0]
 80051d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051da:	3901      	subs	r1, #1
 80051dc:	2900      	cmp	r1, #0
 80051de:	daf5      	bge.n	80051cc <__kernel_rem_pio2f+0x450>
 80051e0:	f1bb 0f00 	cmp.w	fp, #0
 80051e4:	d017      	beq.n	8005216 <__kernel_rem_pio2f+0x49a>
 80051e6:	eef1 7a47 	vneg.f32	s15, s14
 80051ea:	edc5 7a00 	vstr	s15, [r5]
 80051ee:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80051f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80051f6:	a82f      	add	r0, sp, #188	; 0xbc
 80051f8:	2101      	movs	r1, #1
 80051fa:	428b      	cmp	r3, r1
 80051fc:	da0e      	bge.n	800521c <__kernel_rem_pio2f+0x4a0>
 80051fe:	f1bb 0f00 	cmp.w	fp, #0
 8005202:	d001      	beq.n	8005208 <__kernel_rem_pio2f+0x48c>
 8005204:	eef1 7a67 	vneg.f32	s15, s15
 8005208:	edc5 7a01 	vstr	s15, [r5, #4]
 800520c:	e79e      	b.n	800514c <__kernel_rem_pio2f+0x3d0>
 800520e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 800508c <__kernel_rem_pio2f+0x310>
 8005212:	4619      	mov	r1, r3
 8005214:	e7e2      	b.n	80051dc <__kernel_rem_pio2f+0x460>
 8005216:	eef0 7a47 	vmov.f32	s15, s14
 800521a:	e7e6      	b.n	80051ea <__kernel_rem_pio2f+0x46e>
 800521c:	ecb0 7a01 	vldmia	r0!, {s14}
 8005220:	3101      	adds	r1, #1
 8005222:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005226:	e7e8      	b.n	80051fa <__kernel_rem_pio2f+0x47e>
 8005228:	edd0 7a00 	vldr	s15, [r0]
 800522c:	edd0 6a01 	vldr	s13, [r0, #4]
 8005230:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005234:	3c01      	subs	r4, #1
 8005236:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800523a:	ed80 7a00 	vstr	s14, [r0]
 800523e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005242:	edc0 7a01 	vstr	s15, [r0, #4]
 8005246:	e791      	b.n	800516c <__kernel_rem_pio2f+0x3f0>
 8005248:	edd1 7a00 	vldr	s15, [r1]
 800524c:	edd1 6a01 	vldr	s13, [r1, #4]
 8005250:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005254:	3801      	subs	r0, #1
 8005256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800525a:	ed81 7a00 	vstr	s14, [r1]
 800525e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005262:	edc1 7a01 	vstr	s15, [r1, #4]
 8005266:	e786      	b.n	8005176 <__kernel_rem_pio2f+0x3fa>
 8005268:	aa2e      	add	r2, sp, #184	; 0xb8
 800526a:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800526e:	ed91 7a00 	vldr	s14, [r1]
 8005272:	3b01      	subs	r3, #1
 8005274:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005278:	e783      	b.n	8005182 <__kernel_rem_pio2f+0x406>
 800527a:	eef1 6a66 	vneg.f32	s13, s13
 800527e:	eeb1 7a47 	vneg.f32	s14, s14
 8005282:	edc5 6a00 	vstr	s13, [r5]
 8005286:	ed85 7a01 	vstr	s14, [r5, #4]
 800528a:	eef1 7a67 	vneg.f32	s15, s15
 800528e:	e785      	b.n	800519c <__kernel_rem_pio2f+0x420>

08005290 <__kernel_sinf>:
 8005290:	ee10 3a10 	vmov	r3, s0
 8005294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800529c:	da04      	bge.n	80052a8 <__kernel_sinf+0x18>
 800529e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80052a2:	ee17 3a90 	vmov	r3, s15
 80052a6:	b35b      	cbz	r3, 8005300 <__kernel_sinf+0x70>
 80052a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80052ac:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005304 <__kernel_sinf+0x74>
 80052b0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005308 <__kernel_sinf+0x78>
 80052b4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80052b8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800530c <__kernel_sinf+0x7c>
 80052bc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80052c0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005310 <__kernel_sinf+0x80>
 80052c4:	eea7 6a87 	vfma.f32	s12, s15, s14
 80052c8:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005314 <__kernel_sinf+0x84>
 80052cc:	ee60 6a07 	vmul.f32	s13, s0, s14
 80052d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80052d4:	b930      	cbnz	r0, 80052e4 <__kernel_sinf+0x54>
 80052d6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005318 <__kernel_sinf+0x88>
 80052da:	eea7 6a27 	vfma.f32	s12, s14, s15
 80052de:	eea6 0a26 	vfma.f32	s0, s12, s13
 80052e2:	4770      	bx	lr
 80052e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80052e8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80052ec:	eee0 7a86 	vfma.f32	s15, s1, s12
 80052f0:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80052f4:	eddf 7a09 	vldr	s15, [pc, #36]	; 800531c <__kernel_sinf+0x8c>
 80052f8:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80052fc:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	2f2ec9d3 	.word	0x2f2ec9d3
 8005308:	b2d72f34 	.word	0xb2d72f34
 800530c:	3638ef1b 	.word	0x3638ef1b
 8005310:	b9500d01 	.word	0xb9500d01
 8005314:	3c088889 	.word	0x3c088889
 8005318:	be2aaaab 	.word	0xbe2aaaab
 800531c:	3e2aaaab 	.word	0x3e2aaaab

08005320 <fabsf>:
 8005320:	ee10 3a10 	vmov	r3, s0
 8005324:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005328:	ee00 3a10 	vmov	s0, r3
 800532c:	4770      	bx	lr
	...

08005330 <floorf>:
 8005330:	ee10 3a10 	vmov	r3, s0
 8005334:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005338:	3a7f      	subs	r2, #127	; 0x7f
 800533a:	2a16      	cmp	r2, #22
 800533c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005340:	dc2a      	bgt.n	8005398 <floorf+0x68>
 8005342:	2a00      	cmp	r2, #0
 8005344:	da11      	bge.n	800536a <floorf+0x3a>
 8005346:	eddf 7a18 	vldr	s15, [pc, #96]	; 80053a8 <floorf+0x78>
 800534a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800534e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005356:	dd05      	ble.n	8005364 <floorf+0x34>
 8005358:	2b00      	cmp	r3, #0
 800535a:	da23      	bge.n	80053a4 <floorf+0x74>
 800535c:	4a13      	ldr	r2, [pc, #76]	; (80053ac <floorf+0x7c>)
 800535e:	2900      	cmp	r1, #0
 8005360:	bf18      	it	ne
 8005362:	4613      	movne	r3, r2
 8005364:	ee00 3a10 	vmov	s0, r3
 8005368:	4770      	bx	lr
 800536a:	4911      	ldr	r1, [pc, #68]	; (80053b0 <floorf+0x80>)
 800536c:	4111      	asrs	r1, r2
 800536e:	420b      	tst	r3, r1
 8005370:	d0fa      	beq.n	8005368 <floorf+0x38>
 8005372:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80053a8 <floorf+0x78>
 8005376:	ee30 0a27 	vadd.f32	s0, s0, s15
 800537a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	ddef      	ble.n	8005364 <floorf+0x34>
 8005384:	2b00      	cmp	r3, #0
 8005386:	bfbe      	ittt	lt
 8005388:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800538c:	fa40 f202 	asrlt.w	r2, r0, r2
 8005390:	189b      	addlt	r3, r3, r2
 8005392:	ea23 0301 	bic.w	r3, r3, r1
 8005396:	e7e5      	b.n	8005364 <floorf+0x34>
 8005398:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800539c:	d3e4      	bcc.n	8005368 <floorf+0x38>
 800539e:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053a2:	4770      	bx	lr
 80053a4:	2300      	movs	r3, #0
 80053a6:	e7dd      	b.n	8005364 <floorf+0x34>
 80053a8:	7149f2ca 	.word	0x7149f2ca
 80053ac:	bf800000 	.word	0xbf800000
 80053b0:	007fffff 	.word	0x007fffff

080053b4 <scalbnf>:
 80053b4:	ee10 3a10 	vmov	r3, s0
 80053b8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80053bc:	d025      	beq.n	800540a <scalbnf+0x56>
 80053be:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80053c2:	d302      	bcc.n	80053ca <scalbnf+0x16>
 80053c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80053c8:	4770      	bx	lr
 80053ca:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80053ce:	d122      	bne.n	8005416 <scalbnf+0x62>
 80053d0:	4b2a      	ldr	r3, [pc, #168]	; (800547c <scalbnf+0xc8>)
 80053d2:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005480 <scalbnf+0xcc>
 80053d6:	4298      	cmp	r0, r3
 80053d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80053dc:	db16      	blt.n	800540c <scalbnf+0x58>
 80053de:	ee10 3a10 	vmov	r3, s0
 80053e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80053e6:	3a19      	subs	r2, #25
 80053e8:	4402      	add	r2, r0
 80053ea:	2afe      	cmp	r2, #254	; 0xfe
 80053ec:	dd15      	ble.n	800541a <scalbnf+0x66>
 80053ee:	ee10 3a10 	vmov	r3, s0
 80053f2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005484 <scalbnf+0xd0>
 80053f6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005488 <scalbnf+0xd4>
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	eeb0 7a67 	vmov.f32	s14, s15
 8005400:	bfb8      	it	lt
 8005402:	eef0 7a66 	vmovlt.f32	s15, s13
 8005406:	ee27 0a27 	vmul.f32	s0, s14, s15
 800540a:	4770      	bx	lr
 800540c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800548c <scalbnf+0xd8>
 8005410:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005414:	4770      	bx	lr
 8005416:	0dd2      	lsrs	r2, r2, #23
 8005418:	e7e6      	b.n	80053e8 <scalbnf+0x34>
 800541a:	2a00      	cmp	r2, #0
 800541c:	dd06      	ble.n	800542c <scalbnf+0x78>
 800541e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005422:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005426:	ee00 3a10 	vmov	s0, r3
 800542a:	4770      	bx	lr
 800542c:	f112 0f16 	cmn.w	r2, #22
 8005430:	da1a      	bge.n	8005468 <scalbnf+0xb4>
 8005432:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005436:	4298      	cmp	r0, r3
 8005438:	ee10 3a10 	vmov	r3, s0
 800543c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005440:	dd0a      	ble.n	8005458 <scalbnf+0xa4>
 8005442:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005484 <scalbnf+0xd0>
 8005446:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005488 <scalbnf+0xd4>
 800544a:	eef0 7a40 	vmov.f32	s15, s0
 800544e:	2b00      	cmp	r3, #0
 8005450:	bf18      	it	ne
 8005452:	eeb0 0a47 	vmovne.f32	s0, s14
 8005456:	e7db      	b.n	8005410 <scalbnf+0x5c>
 8005458:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800548c <scalbnf+0xd8>
 800545c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005490 <scalbnf+0xdc>
 8005460:	eef0 7a40 	vmov.f32	s15, s0
 8005464:	2b00      	cmp	r3, #0
 8005466:	e7f3      	b.n	8005450 <scalbnf+0x9c>
 8005468:	3219      	adds	r2, #25
 800546a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800546e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005472:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005494 <scalbnf+0xe0>
 8005476:	ee07 3a10 	vmov	s14, r3
 800547a:	e7c4      	b.n	8005406 <scalbnf+0x52>
 800547c:	ffff3cb0 	.word	0xffff3cb0
 8005480:	4c000000 	.word	0x4c000000
 8005484:	7149f2ca 	.word	0x7149f2ca
 8005488:	f149f2ca 	.word	0xf149f2ca
 800548c:	0da24260 	.word	0x0da24260
 8005490:	8da24260 	.word	0x8da24260
 8005494:	33000000 	.word	0x33000000

08005498 <_init>:
 8005498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549a:	bf00      	nop
 800549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800549e:	bc08      	pop	{r3}
 80054a0:	469e      	mov	lr, r3
 80054a2:	4770      	bx	lr

080054a4 <_fini>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr
